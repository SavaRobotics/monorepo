"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/workflow/route";
exports.ids = ["app/api/workflow/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fworkflow%2Froute&page=%2Fapi%2Fworkflow%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fworkflow%2Froute.ts&appDir=%2FUsers%2Falessiotoniolo%2Fmonorepo%2Fbrain%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falessiotoniolo%2Fmonorepo%2Fbrain&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fworkflow%2Froute&page=%2Fapi%2Fworkflow%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fworkflow%2Froute.ts&appDir=%2FUsers%2Falessiotoniolo%2Fmonorepo%2Fbrain%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falessiotoniolo%2Fmonorepo%2Fbrain&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_alessiotoniolo_monorepo_brain_app_api_workflow_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/workflow/route.ts */ \"(rsc)/./app/api/workflow/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/workflow/route\",\n        pathname: \"/api/workflow\",\n        filename: \"route\",\n        bundlePath: \"app/api/workflow/route\"\n    },\n    resolvedPagePath: \"/Users/alessiotoniolo/monorepo/brain/app/api/workflow/route.ts\",\n    nextConfigOutput,\n    userland: _Users_alessiotoniolo_monorepo_brain_app_api_workflow_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/workflow/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ3b3JrZmxvdyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGd29ya2Zsb3clMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ3b3JrZmxvdyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFsZXNzaW90b25pb2xvJTJGbW9ub3JlcG8lMkZicmFpbiUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZhbGVzc2lvdG9uaW9sbyUyRm1vbm9yZXBvJTJGYnJhaW4maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2M7QUFDM0Y7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmFpbi8/ZDFkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvYWxlc3Npb3RvbmlvbG8vbW9ub3JlcG8vYnJhaW4vYXBwL2FwaS93b3JrZmxvdy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvd29ya2Zsb3cvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS93b3JrZmxvd1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvd29ya2Zsb3cvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYWxlc3Npb3RvbmlvbG8vbW9ub3JlcG8vYnJhaW4vYXBwL2FwaS93b3JrZmxvdy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvd29ya2Zsb3cvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fworkflow%2Froute&page=%2Fapi%2Fworkflow%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fworkflow%2Froute.ts&appDir=%2FUsers%2Falessiotoniolo%2Fmonorepo%2Fbrain%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falessiotoniolo%2Fmonorepo%2Fbrain&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/workflow/route.ts":
/*!***********************************!*\
  !*** ./app/api/workflow/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _src_lib_workflow_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/src/lib/workflow-manager */ \"(rsc)/./src/lib/workflow-manager.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        // Validate request body\n        if (!body.prompt) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Prompt is required\"\n            }, {\n                status: 400\n            });\n        }\n        const workflowManager = (0,_src_lib_workflow_manager__WEBPACK_IMPORTED_MODULE_1__.getWorkflowManager)();\n        // Check if streaming is requested\n        if (body.stream) {\n            // Create a streaming response\n            const encoder = new TextEncoder();\n            const stream = new ReadableStream({\n                async start (controller) {\n                    try {\n                        for await (const iteration of workflowManager.streamWorkflow(body)){\n                            // Send each iteration as a JSON line\n                            const data = JSON.stringify(iteration) + \"\\n\";\n                            controller.enqueue(encoder.encode(data));\n                        }\n                        controller.close();\n                    } catch (error) {\n                        const errorData = JSON.stringify({\n                            error: error instanceof Error ? error.message : String(error)\n                        }) + \"\\n\";\n                        controller.enqueue(encoder.encode(errorData));\n                        controller.close();\n                    }\n                }\n            });\n            return new Response(stream, {\n                headers: {\n                    \"Content-Type\": \"text/event-stream\",\n                    \"Cache-Control\": \"no-cache\",\n                    \"Connection\": \"keep-alive\"\n                }\n            });\n        } else {\n            // Create async workflow and return ID\n            const workflowId = await workflowManager.createWorkflow({\n                prompt: body.prompt,\n                model: body.model,\n                maxIterations: body.maxIterations,\n                temperature: body.temperature,\n                maxTokens: body.maxTokens,\n                tools: body.tools\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                id: workflowId,\n                status: \"processing\",\n                message: \"Workflow created successfully\",\n                statusUrl: `/api/workflow/status/${workflowId}`\n            });\n        }\n    } catch (error) {\n        console.error(\"Workflow creation error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Failed to create workflow\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        const workflowManager = (0,_src_lib_workflow_manager__WEBPACK_IMPORTED_MODULE_1__.getWorkflowManager)();\n        const workflows = workflowManager.getAllWorkflows();\n        // Return summary of all workflows\n        const summary = workflows.map((w)=>({\n                id: w.id,\n                status: w.status,\n                createdAt: w.createdAt,\n                updatedAt: w.updatedAt,\n                iterationCount: w.iterations.length,\n                hasResult: !!w.result,\n                error: w.error\n            }));\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            workflows: summary,\n            count: summary.length\n        });\n    } catch (error) {\n        console.error(\"Workflow list error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Failed to list workflows\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3dvcmtmbG93L3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDUTtBQUV6RCxlQUFlRSxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsTUFBTUMsT0FBTyxNQUFNRCxRQUFRRSxJQUFJO1FBRS9CLHdCQUF3QjtRQUN4QixJQUFJLENBQUNELEtBQUtFLE1BQU0sRUFBRTtZQUNoQixPQUFPTixxREFBWUEsQ0FBQ0ssSUFBSSxDQUN0QjtnQkFBRUUsT0FBTztZQUFxQixHQUM5QjtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsTUFBTUMsa0JBQWtCUiw2RUFBa0JBO1FBRTFDLGtDQUFrQztRQUNsQyxJQUFJRyxLQUFLTSxNQUFNLEVBQUU7WUFDZiw4QkFBOEI7WUFDOUIsTUFBTUMsVUFBVSxJQUFJQztZQUNwQixNQUFNRixTQUFTLElBQUlHLGVBQWU7Z0JBQ2hDLE1BQU1DLE9BQU1DLFVBQVU7b0JBQ3BCLElBQUk7d0JBQ0YsV0FBVyxNQUFNQyxhQUFhUCxnQkFBZ0JRLGNBQWMsQ0FBQ2IsTUFBTzs0QkFDbEUscUNBQXFDOzRCQUNyQyxNQUFNYyxPQUFPQyxLQUFLQyxTQUFTLENBQUNKLGFBQWE7NEJBQ3pDRCxXQUFXTSxPQUFPLENBQUNWLFFBQVFXLE1BQU0sQ0FBQ0o7d0JBQ3BDO3dCQUNBSCxXQUFXUSxLQUFLO29CQUNsQixFQUFFLE9BQU9oQixPQUFPO3dCQUNkLE1BQU1pQixZQUFZTCxLQUFLQyxTQUFTLENBQUM7NEJBQy9CYixPQUFPQSxpQkFBaUJrQixRQUFRbEIsTUFBTW1CLE9BQU8sR0FBR0MsT0FBT3BCO3dCQUN6RCxLQUFLO3dCQUNMUSxXQUFXTSxPQUFPLENBQUNWLFFBQVFXLE1BQU0sQ0FBQ0U7d0JBQ2xDVCxXQUFXUSxLQUFLO29CQUNsQjtnQkFDRjtZQUNGO1lBRUEsT0FBTyxJQUFJSyxTQUFTbEIsUUFBUTtnQkFDMUJtQixTQUFTO29CQUNQLGdCQUFnQjtvQkFDaEIsaUJBQWlCO29CQUNqQixjQUFjO2dCQUNoQjtZQUNGO1FBQ0YsT0FBTztZQUNMLHNDQUFzQztZQUN0QyxNQUFNQyxhQUFhLE1BQU1yQixnQkFBZ0JzQixjQUFjLENBQUM7Z0JBQ3REekIsUUFBUUYsS0FBS0UsTUFBTTtnQkFDbkIwQixPQUFPNUIsS0FBSzRCLEtBQUs7Z0JBQ2pCQyxlQUFlN0IsS0FBSzZCLGFBQWE7Z0JBQ2pDQyxhQUFhOUIsS0FBSzhCLFdBQVc7Z0JBQzdCQyxXQUFXL0IsS0FBSytCLFNBQVM7Z0JBQ3pCQyxPQUFPaEMsS0FBS2dDLEtBQUs7WUFDbkI7WUFFQSxPQUFPcEMscURBQVlBLENBQUNLLElBQUksQ0FBQztnQkFDdkJnQyxJQUFJUDtnQkFDSnRCLFFBQVE7Z0JBQ1JrQixTQUFTO2dCQUNUWSxXQUFXLENBQUMscUJBQXFCLEVBQUVSLFdBQVcsQ0FBQztZQUNqRDtRQUNGO0lBQ0YsRUFBRSxPQUFPdkIsT0FBTztRQUNkZ0MsUUFBUWhDLEtBQUssQ0FBQyw0QkFBNEJBO1FBQzFDLE9BQU9QLHFEQUFZQSxDQUFDSyxJQUFJLENBQ3RCO1lBQUVFLE9BQU9BLGlCQUFpQmtCLFFBQVFsQixNQUFNbUIsT0FBTyxHQUFHO1FBQTRCLEdBQzlFO1lBQUVsQixRQUFRO1FBQUk7SUFFbEI7QUFDRjtBQUVPLGVBQWVnQyxJQUFJckMsT0FBb0I7SUFDNUMsSUFBSTtRQUNGLE1BQU1NLGtCQUFrQlIsNkVBQWtCQTtRQUMxQyxNQUFNd0MsWUFBWWhDLGdCQUFnQmlDLGVBQWU7UUFFakQsa0NBQWtDO1FBQ2xDLE1BQU1DLFVBQVVGLFVBQVVHLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBTTtnQkFDbENSLElBQUlRLEVBQUVSLEVBQUU7Z0JBQ1I3QixRQUFRcUMsRUFBRXJDLE1BQU07Z0JBQ2hCc0MsV0FBV0QsRUFBRUMsU0FBUztnQkFDdEJDLFdBQVdGLEVBQUVFLFNBQVM7Z0JBQ3RCQyxnQkFBZ0JILEVBQUVJLFVBQVUsQ0FBQ0MsTUFBTTtnQkFDbkNDLFdBQVcsQ0FBQyxDQUFDTixFQUFFTyxNQUFNO2dCQUNyQjdDLE9BQU9zQyxFQUFFdEMsS0FBSztZQUNoQjtRQUVBLE9BQU9QLHFEQUFZQSxDQUFDSyxJQUFJLENBQUM7WUFDdkJvQyxXQUFXRTtZQUNYVSxPQUFPVixRQUFRTyxNQUFNO1FBQ3ZCO0lBQ0YsRUFBRSxPQUFPM0MsT0FBTztRQUNkZ0MsUUFBUWhDLEtBQUssQ0FBQyx3QkFBd0JBO1FBQ3RDLE9BQU9QLHFEQUFZQSxDQUFDSyxJQUFJLENBQ3RCO1lBQUVFLE9BQU9BLGlCQUFpQmtCLFFBQVFsQixNQUFNbUIsT0FBTyxHQUFHO1FBQTJCLEdBQzdFO1lBQUVsQixRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2JyYWluLy4vYXBwL2FwaS93b3JrZmxvdy9yb3V0ZS50cz85NDQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBnZXRXb3JrZmxvd01hbmFnZXIgfSBmcm9tICdAL3NyYy9saWIvd29ya2Zsb3ctbWFuYWdlcic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgIFxuICAgIC8vIFZhbGlkYXRlIHJlcXVlc3QgYm9keVxuICAgIGlmICghYm9keS5wcm9tcHQpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ1Byb21wdCBpcyByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHdvcmtmbG93TWFuYWdlciA9IGdldFdvcmtmbG93TWFuYWdlcigpO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIHN0cmVhbWluZyBpcyByZXF1ZXN0ZWRcbiAgICBpZiAoYm9keS5zdHJlYW0pIHtcbiAgICAgIC8vIENyZWF0ZSBhIHN0cmVhbWluZyByZXNwb25zZVxuICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgY29uc3Qgc3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgYXN5bmMgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZXJhdGlvbiBvZiB3b3JrZmxvd01hbmFnZXIuc3RyZWFtV29ya2Zsb3coYm9keSkpIHtcbiAgICAgICAgICAgICAgLy8gU2VuZCBlYWNoIGl0ZXJhdGlvbiBhcyBhIEpTT04gbGluZVxuICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoaXRlcmF0aW9uKSArICdcXG4nO1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZW5jb2Rlci5lbmNvZGUoZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpIFxuICAgICAgICAgICAgfSkgKyAnXFxuJztcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShlbmNvZGVyLmVuY29kZShlcnJvckRhdGEpKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShzdHJlYW0sIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9ldmVudC1zdHJlYW0nLFxuICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlJyxcbiAgICAgICAgICAnQ29ubmVjdGlvbic6ICdrZWVwLWFsaXZlJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgYXN5bmMgd29ya2Zsb3cgYW5kIHJldHVybiBJRFxuICAgICAgY29uc3Qgd29ya2Zsb3dJZCA9IGF3YWl0IHdvcmtmbG93TWFuYWdlci5jcmVhdGVXb3JrZmxvdyh7XG4gICAgICAgIHByb21wdDogYm9keS5wcm9tcHQsXG4gICAgICAgIG1vZGVsOiBib2R5Lm1vZGVsLFxuICAgICAgICBtYXhJdGVyYXRpb25zOiBib2R5Lm1heEl0ZXJhdGlvbnMsXG4gICAgICAgIHRlbXBlcmF0dXJlOiBib2R5LnRlbXBlcmF0dXJlLFxuICAgICAgICBtYXhUb2tlbnM6IGJvZHkubWF4VG9rZW5zLFxuICAgICAgICB0b29sczogYm9keS50b29scyxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICBpZDogd29ya2Zsb3dJZCxcbiAgICAgICAgc3RhdHVzOiAncHJvY2Vzc2luZycsXG4gICAgICAgIG1lc3NhZ2U6ICdXb3JrZmxvdyBjcmVhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIHN0YXR1c1VybDogYC9hcGkvd29ya2Zsb3cvc3RhdHVzLyR7d29ya2Zsb3dJZH1gLFxuICAgICAgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1dvcmtmbG93IGNyZWF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gY3JlYXRlIHdvcmtmbG93JyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgd29ya2Zsb3dNYW5hZ2VyID0gZ2V0V29ya2Zsb3dNYW5hZ2VyKCk7XG4gICAgY29uc3Qgd29ya2Zsb3dzID0gd29ya2Zsb3dNYW5hZ2VyLmdldEFsbFdvcmtmbG93cygpO1xuICAgIFxuICAgIC8vIFJldHVybiBzdW1tYXJ5IG9mIGFsbCB3b3JrZmxvd3NcbiAgICBjb25zdCBzdW1tYXJ5ID0gd29ya2Zsb3dzLm1hcCh3ID0+ICh7XG4gICAgICBpZDogdy5pZCxcbiAgICAgIHN0YXR1czogdy5zdGF0dXMsXG4gICAgICBjcmVhdGVkQXQ6IHcuY3JlYXRlZEF0LFxuICAgICAgdXBkYXRlZEF0OiB3LnVwZGF0ZWRBdCxcbiAgICAgIGl0ZXJhdGlvbkNvdW50OiB3Lml0ZXJhdGlvbnMubGVuZ3RoLFxuICAgICAgaGFzUmVzdWx0OiAhIXcucmVzdWx0LFxuICAgICAgZXJyb3I6IHcuZXJyb3IsXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHdvcmtmbG93czogc3VtbWFyeSxcbiAgICAgIGNvdW50OiBzdW1tYXJ5Lmxlbmd0aCxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdXb3JrZmxvdyBsaXN0IGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdGYWlsZWQgdG8gbGlzdCB3b3JrZmxvd3MnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImdldFdvcmtmbG93TWFuYWdlciIsIlBPU1QiLCJyZXF1ZXN0IiwiYm9keSIsImpzb24iLCJwcm9tcHQiLCJlcnJvciIsInN0YXR1cyIsIndvcmtmbG93TWFuYWdlciIsInN0cmVhbSIsImVuY29kZXIiLCJUZXh0RW5jb2RlciIsIlJlYWRhYmxlU3RyZWFtIiwic3RhcnQiLCJjb250cm9sbGVyIiwiaXRlcmF0aW9uIiwic3RyZWFtV29ya2Zsb3ciLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsImVucXVldWUiLCJlbmNvZGUiLCJjbG9zZSIsImVycm9yRGF0YSIsIkVycm9yIiwibWVzc2FnZSIsIlN0cmluZyIsIlJlc3BvbnNlIiwiaGVhZGVycyIsIndvcmtmbG93SWQiLCJjcmVhdGVXb3JrZmxvdyIsIm1vZGVsIiwibWF4SXRlcmF0aW9ucyIsInRlbXBlcmF0dXJlIiwibWF4VG9rZW5zIiwidG9vbHMiLCJpZCIsInN0YXR1c1VybCIsImNvbnNvbGUiLCJHRVQiLCJ3b3JrZmxvd3MiLCJnZXRBbGxXb3JrZmxvd3MiLCJzdW1tYXJ5IiwibWFwIiwidyIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsIml0ZXJhdGlvbkNvdW50IiwiaXRlcmF0aW9ucyIsImxlbmd0aCIsImhhc1Jlc3VsdCIsInJlc3VsdCIsImNvdW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/workflow/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/llm-workflow.ts":
/*!*********************************!*\
  !*** ./src/lib/llm-workflow.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMWorkflow: () => (/* binding */ LLMWorkflow)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n/* harmony import */ var _mcp_singleton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mcp-singleton */ \"(rsc)/./src/lib/mcp-singleton.ts\");\n\n\nclass LLMWorkflow {\n    constructor(apiKey){\n        if (!apiKey) {\n            throw new Error(\"Anthropic API key is required\");\n        }\n        this.anthropic = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            apiKey\n        });\n        this.mcpManager = (0,_mcp_singleton__WEBPACK_IMPORTED_MODULE_0__.getMCPManager)();\n    }\n    async executeWorkflow(options, onIteration) {\n        const { prompt, model = \"claude-3-5-sonnet-20241022\", maxIterations = 10, temperature = 0, maxTokens = 4096, tools: toolFilter } = options;\n        // Ensure MCP manager is initialized\n        if (!this.mcpManager.isInitialized()) {\n            await this.mcpManager.initialize();\n        }\n        // Get available tools\n        let allTools = this.mcpManager.getAvailableTools();\n        // Filter tools if specified\n        if (toolFilter && toolFilter.length > 0) {\n            allTools = allTools.filter((tool)=>toolFilter.some((filter)=>tool.name.includes(filter)));\n        }\n        if (allTools.length === 0) {\n            return {\n                success: false,\n                iterations: 0,\n                messages: [],\n                error: \"No MCP tools available\"\n            };\n        }\n        // Convert MCP tools to Anthropic format\n        const anthropicTools = allTools.map((tool)=>({\n                name: tool.name,\n                description: tool.description || \"\",\n                input_schema: tool.inputSchema\n            }));\n        // Build initial prompt with available tools\n        const systemPrompt = `You have access to multiple MCP tools for various operations:\n\nAvailable tools:\n${allTools.map((tool)=>`- ${tool.name}: ${tool.description || \"No description\"}`).join(\"\\n\")}\n\n${prompt}`;\n        // Initialize conversation\n        const messages = [\n            {\n                role: \"user\",\n                content: systemPrompt\n            }\n        ];\n        let conversationComplete = false;\n        let iterations = 0;\n        let finalResponse = \"\";\n        try {\n            while(!conversationComplete && iterations < maxIterations){\n                iterations++;\n                // Notify about thinking\n                onIteration?.({\n                    iteration: iterations,\n                    type: \"thinking\",\n                    content: `Claude is thinking (iteration ${iterations})...`\n                });\n                // Get Claude's response\n                const response = await this.anthropic.messages.create({\n                    model,\n                    messages,\n                    max_tokens: maxTokens,\n                    tools: anthropicTools,\n                    temperature\n                });\n                // Add assistant message to history\n                messages.push({\n                    role: \"assistant\",\n                    content: response.content\n                });\n                // Check if Claude wants to use tools\n                const toolUses = response.content.filter((block)=>block.type === \"tool_use\");\n                if (toolUses.length === 0) {\n                    // No more tools to use, conversation complete\n                    conversationComplete = true;\n                    const textBlocks = response.content.filter((block)=>block.type === \"text\").map((block)=>block.text).join(\"\\n\");\n                    finalResponse = textBlocks;\n                    onIteration?.({\n                        iteration: iterations,\n                        type: \"complete\",\n                        content: textBlocks\n                    });\n                } else {\n                    // Execute tool calls\n                    const toolResults = [];\n                    const toolCallDetails = [];\n                    for (const toolUse of toolUses){\n                        const toolCallDetail = {\n                            name: toolUse.name,\n                            arguments: toolUse.input\n                        };\n                        try {\n                            // Execute tool via MCP manager\n                            const result = await this.mcpManager.executeToolCall(toolUse.name, toolUse.input);\n                            toolCallDetail.result = result.content;\n                            toolResults.push({\n                                type: \"tool_result\",\n                                tool_use_id: toolUse.id,\n                                content: JSON.stringify(result.content)\n                            });\n                        } catch (error) {\n                            toolCallDetail.error = String(error);\n                            toolResults.push({\n                                type: \"tool_result\",\n                                tool_use_id: toolUse.id,\n                                content: JSON.stringify({\n                                    error: String(error)\n                                }),\n                                is_error: true\n                            });\n                        }\n                        toolCallDetails.push(toolCallDetail);\n                    }\n                    // Notify about tool usage\n                    onIteration?.({\n                        iteration: iterations,\n                        type: \"tool_use\",\n                        toolCalls: toolCallDetails\n                    });\n                    // Add tool results to conversation\n                    messages.push({\n                        role: \"user\",\n                        content: toolResults\n                    });\n                }\n            }\n            if (iterations >= maxIterations) {\n                return {\n                    success: false,\n                    iterations,\n                    messages,\n                    error: \"Reached maximum iterations limit\"\n                };\n            }\n            return {\n                success: true,\n                iterations,\n                messages,\n                finalResponse\n            };\n        } catch (error) {\n            return {\n                success: false,\n                iterations,\n                messages,\n                error: error instanceof Error ? error.message : String(error)\n            };\n        }\n    }\n    async *executeWorkflowStream(options) {\n        const iterations = [];\n        const result = await this.executeWorkflow(options, (iteration)=>{\n            iterations.push(iteration);\n        });\n        // Yield all collected iterations\n        for (const iteration of iterations){\n            yield iteration;\n        }\n        // Yield final error if any\n        if (!result.success && result.error) {\n            yield {\n                iteration: result.iterations + 1,\n                type: \"complete\",\n                content: `Error: ${result.error}`\n            };\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/llm-workflow.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mcp-singleton.ts":
/*!**********************************!*\
  !*** ./src/lib/mcp-singleton.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMCPManager: () => (/* binding */ getMCPManager)\n/* harmony export */ });\n/* harmony import */ var _mcp_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mcp/manager */ \"(rsc)/./src/mcp/manager.ts\");\n/* harmony import */ var _mcp_servers_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../mcp/servers/index */ \"(rsc)/./src/mcp/servers/index.ts\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dotenv */ \"(rsc)/./node_modules/dotenv/lib/main.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// Load environment variables\ndotenv__WEBPACK_IMPORTED_MODULE_2__.config({\n    path: \"./.env\"\n});\nclass MCPManagerSingleton {\n    constructor(options = {}){\n        this.initialized = false;\n        this.serverRestartCounts = new Map();\n        this.isShuttingDown = false;\n        this.manager = new _mcp_manager__WEBPACK_IMPORTED_MODULE_0__.MCPServerManager();\n        this.options = {\n            healthCheckInterval: options.healthCheckInterval || 30000,\n            maxRestartAttempts: options.maxRestartAttempts || 3,\n            restartDelay: options.restartDelay || 5000\n        };\n        // Setup shutdown hooks\n        this.setupShutdownHooks();\n    }\n    static getInstance(options) {\n        if (!MCPManagerSingleton.instance) {\n            MCPManagerSingleton.instance = new MCPManagerSingleton(options);\n        }\n        return MCPManagerSingleton.instance;\n    }\n    setupShutdownHooks() {\n        const shutdown = async (signal)=>{\n            if (this.isShuttingDown) return;\n            console.log(`\\n🛑 Received ${signal}, shutting down MCP servers gracefully...`);\n            this.isShuttingDown = true;\n            await this.cleanup();\n            process.exit(0);\n        };\n        // Handle different termination signals\n        process.on(\"SIGINT\", ()=>shutdown(\"SIGINT\"));\n        process.on(\"SIGTERM\", ()=>shutdown(\"SIGTERM\"));\n        process.on(\"beforeExit\", ()=>shutdown(\"beforeExit\"));\n        // Handle uncaught errors\n        process.on(\"uncaughtException\", async (error)=>{\n            console.error(\"❌ Uncaught exception:\", error);\n            await this.cleanup();\n            process.exit(1);\n        });\n        process.on(\"unhandledRejection\", async (reason, promise)=>{\n            console.error(\"❌ Unhandled rejection at:\", promise, \"reason:\", reason);\n        });\n    }\n    async initialize() {\n        if (this.initialized) {\n            console.log(\"✅ MCP Manager already initialized\");\n            return;\n        }\n        console.log(\"\\uD83D\\uDE80 Initializing MCP Manager Singleton...\");\n        try {\n            // Check for required environment variables\n            const requiredEnvVars = this.getRequiredEnvVars();\n            for (const envVar of requiredEnvVars){\n                if (!process.env[envVar]) {\n                    throw new Error(`Missing required environment variable: ${envVar}`);\n                }\n            }\n            // Start all available MCP servers\n            await this.manager.startServers(_mcp_servers_index__WEBPACK_IMPORTED_MODULE_1__.availableServers);\n            // Verify we have tools available\n            const tools = this.manager.getAllTools();\n            if (tools.length === 0) {\n                throw new Error(\"No MCP tools available after initialization\");\n            }\n            console.log(`✅ MCP Manager initialized with ${tools.length} tools`);\n            tools.forEach((tool)=>{\n                console.log(`   - ${tool.name}: ${tool.description || \"No description\"}`);\n            });\n            // Start health monitoring\n            this.startHealthMonitoring();\n            this.initialized = true;\n        } catch (error) {\n            console.error(\"❌ Failed to initialize MCP Manager:\", error);\n            await this.cleanup();\n            throw error;\n        }\n    }\n    getRequiredEnvVars() {\n        // Only check for Supabase vars if the server is configured\n        const hasSupabase = _mcp_servers_index__WEBPACK_IMPORTED_MODULE_1__.availableServers.some((s)=>s.name === \"supabase\");\n        return hasSupabase ? [\n            \"SUPABASE_URL\",\n            \"SUPABASE_KEY\"\n        ] : [];\n    }\n    startHealthMonitoring() {\n        if (this.healthCheckTimer) {\n            clearInterval(this.healthCheckTimer);\n        }\n        this.healthCheckTimer = setInterval(async ()=>{\n            if (this.isShuttingDown) return;\n            await this.performHealthCheck();\n        }, this.options.healthCheckInterval);\n        // Run initial health check\n        setTimeout(()=>this.performHealthCheck(), 1000);\n    }\n    async performHealthCheck() {\n        const runningServers = this.manager.getRunningServers();\n        for (const [serverName, instance] of runningServers){\n            try {\n                // Try to list tools as a health check\n                const tools = await instance.client.listTools();\n                console.log(`✅ Health check passed for ${serverName} (${tools.tools.length} tools)`);\n                // Reset restart count on successful health check\n                this.serverRestartCounts.set(serverName, 0);\n            } catch (error) {\n                console.error(`❌ Health check failed for ${serverName}:`, error);\n                // Attempt to restart the failed server\n                await this.restartServer(serverName);\n            }\n        }\n    }\n    async restartServer(serverName) {\n        const restartCount = this.serverRestartCounts.get(serverName) || 0;\n        if (restartCount >= this.options.maxRestartAttempts) {\n            console.error(`❌ Max restart attempts (${this.options.maxRestartAttempts}) reached for ${serverName}. Giving up.`);\n            return;\n        }\n        console.log(`🔄 Attempting to restart ${serverName} (attempt ${restartCount + 1}/${this.options.maxRestartAttempts})...`);\n        this.serverRestartCounts.set(serverName, restartCount + 1);\n        try {\n            // Stop the failed server\n            await this.manager.stopServer(serverName);\n            // Wait before restarting\n            await new Promise((resolve)=>setTimeout(resolve, this.options.restartDelay));\n            // Find the server config\n            const serverConfig = _mcp_servers_index__WEBPACK_IMPORTED_MODULE_1__.availableServers.find((s)=>s.name === serverName);\n            if (!serverConfig) {\n                console.error(`❌ Server config not found for ${serverName}`);\n                return;\n            }\n            // Restart the server\n            await this.manager.startServer(serverConfig);\n            console.log(`✅ Successfully restarted ${serverName}`);\n        } catch (error) {\n            console.error(`❌ Failed to restart ${serverName}:`, error);\n        }\n    }\n    getManager() {\n        if (!this.initialized) {\n            throw new Error(\"MCP Manager not initialized. Call initialize() first.\");\n        }\n        return this.manager;\n    }\n    async cleanup() {\n        console.log(\"\\uD83E\\uDDF9 Cleaning up MCP Manager...\");\n        // Stop health monitoring\n        if (this.healthCheckTimer) {\n            clearInterval(this.healthCheckTimer);\n            this.healthCheckTimer = undefined;\n        }\n        // Cleanup manager and all servers\n        await this.manager.cleanup();\n        this.initialized = false;\n        console.log(\"✅ MCP Manager cleanup complete\");\n    }\n    isInitialized() {\n        return this.initialized;\n    }\n    getAvailableTools() {\n        if (!this.initialized) {\n            return [];\n        }\n        return this.manager.getAllTools();\n    }\n    async executeToolCall(toolName, args) {\n        if (!this.initialized) {\n            throw new Error(\"MCP Manager not initialized\");\n        }\n        return this.manager.executeToolCall(toolName, args);\n    }\n    getServerStatus() {\n        const runningServers = this.manager.getRunningServers();\n        const status = {};\n        for (const [name, instance] of runningServers){\n            status[name] = {\n                running: true,\n                tools: instance.tools.map((t)=>({\n                        name: t.name,\n                        description: t.description\n                    })),\n                restartCount: this.serverRestartCounts.get(name) || 0\n            };\n        }\n        // Add non-running servers\n        for (const server of _mcp_servers_index__WEBPACK_IMPORTED_MODULE_1__.availableServers){\n            if (!status[server.name]) {\n                status[server.name] = {\n                    running: false,\n                    tools: [],\n                    restartCount: this.serverRestartCounts.get(server.name) || 0\n                };\n            }\n        }\n        return status;\n    }\n}\n// Export singleton instance getter\nfunction getMCPManager(options) {\n    return MCPManagerSingleton.getInstance(options);\n}\n// Initialize on module load for Next.js\nif (true) {\n    // Server-side only\n    const manager = getMCPManager();\n    // Initialize asynchronously\n    manager.initialize().catch((error)=>{\n        console.error(\"Failed to initialize MCP Manager on module load:\", error);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mcp-singleton.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/workflow-manager.ts":
/*!*************************************!*\
  !*** ./src/lib/workflow-manager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWorkflowManager: () => (/* binding */ getWorkflowManager)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _llm_workflow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./llm-workflow */ \"(rsc)/./src/lib/llm-workflow.ts\");\n\n\nclass WorkflowManager {\n    constructor(){\n        this.workflows = new Map();\n        this.maxWorkflows = 100 // Limit stored workflows\n        ;\n        const apiKey = process.env.ANTHROPIC_API_KEY;\n        if (!apiKey) {\n            throw new Error(\"ANTHROPIC_API_KEY environment variable is required\");\n        }\n        this.llmWorkflow = new _llm_workflow__WEBPACK_IMPORTED_MODULE_1__.LLMWorkflow(apiKey);\n    }\n    static getInstance() {\n        if (!WorkflowManager.instance) {\n            WorkflowManager.instance = new WorkflowManager();\n        }\n        return WorkflowManager.instance;\n    }\n    async createWorkflow(options) {\n        const id = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(16).toString(\"hex\");\n        const workflow = {\n            id,\n            status: \"queued\",\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            options,\n            iterations: []\n        };\n        this.workflows.set(id, workflow);\n        // Clean up old workflows if we exceed the limit\n        if (this.workflows.size > this.maxWorkflows) {\n            const oldestId = Array.from(this.workflows.entries()).sort(([, a], [, b])=>a.createdAt.getTime() - b.createdAt.getTime())[0][0];\n            this.workflows.delete(oldestId);\n        }\n        // Execute workflow asynchronously\n        this.executeWorkflowAsync(id);\n        return id;\n    }\n    async executeWorkflowAsync(id) {\n        const workflow = this.workflows.get(id);\n        if (!workflow) return;\n        try {\n            // Update status to processing\n            workflow.status = \"processing\";\n            workflow.updatedAt = new Date();\n            // Execute the workflow\n            const result = await this.llmWorkflow.executeWorkflow(workflow.options, (iteration)=>{\n                // Update iterations in real-time\n                workflow.iterations.push(iteration);\n                workflow.updatedAt = new Date();\n            });\n            // Update with final result\n            workflow.result = result;\n            workflow.status = result.success ? \"completed\" : \"error\";\n            workflow.error = result.error;\n            workflow.updatedAt = new Date();\n        } catch (error) {\n            workflow.status = \"error\";\n            workflow.error = error instanceof Error ? error.message : String(error);\n            workflow.updatedAt = new Date();\n        }\n    }\n    getWorkflow(id) {\n        return this.workflows.get(id);\n    }\n    getAllWorkflows() {\n        return Array.from(this.workflows.values()).sort((a, b)=>b.createdAt.getTime() - a.createdAt.getTime());\n    }\n    deleteWorkflow(id) {\n        return this.workflows.delete(id);\n    }\n    async *streamWorkflow(options) {\n        yield* this.llmWorkflow.executeWorkflowStream(options);\n    }\n}\nfunction getWorkflowManager() {\n    return WorkflowManager.getInstance();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/workflow-manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/mcp/manager.ts":
/*!****************************!*\
  !*** ./src/mcp/manager.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MCPServerManager: () => (/* binding */ MCPServerManager)\n/* harmony export */ });\n/* harmony import */ var _modelcontextprotocol_sdk_client_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/index.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js\");\n/* harmony import */ var _modelcontextprotocol_sdk_client_stdio_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @modelcontextprotocol/sdk/client/stdio.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js\");\n\n\nclass MCPServerManager {\n    // Get running servers for health checks\n    getRunningServers() {\n        return new Map(this.servers);\n    }\n    async startServer(config) {\n        console.log(`🚀 Starting MCP server: ${config.name}`);\n        // Check if server is enabled\n        if (!config.enabled()) {\n            throw new Error(`MCP server ${config.name} is not enabled (missing environment variables?)`);\n        }\n        // Create MCP client\n        const client = new _modelcontextprotocol_sdk_client_index_js__WEBPACK_IMPORTED_MODULE_0__.Client({\n            name: `${config.name}-client`,\n            version: \"1.0.0\"\n        }, {\n            capabilities: {}\n        });\n        // Create transport with environment variables\n        const envVars = {};\n        // Copy process.env, filtering out undefined values\n        for (const [key, value] of Object.entries(process.env)){\n            if (value !== undefined) {\n                envVars[key] = value;\n            }\n        }\n        // Add config env variables\n        if (config.env) {\n            Object.assign(envVars, config.env);\n        }\n        const transport = new _modelcontextprotocol_sdk_client_stdio_js__WEBPACK_IMPORTED_MODULE_1__.StdioClientTransport({\n            command: config.command,\n            args: config.args,\n            env: envVars\n        });\n        try {\n            // Connect to the server\n            console.log(`🔌 Connecting to ${config.name} with command: ${config.command} ${config.args.join(\" \")}`);\n            await client.connect(transport);\n            console.log(`✅ Connected to ${config.name} MCP server`);\n            // Get available tools\n            console.log(`📋 Listing tools for ${config.name}...`);\n            const toolsResponse = await client.listTools();\n            const tools = toolsResponse.tools;\n            console.log(`🔧 ${config.name} tools:`, tools.map((t)=>t.name).join(\", \"));\n            const serverInstance = {\n                config,\n                client,\n                transport,\n                tools\n            };\n            this.servers.set(config.name, serverInstance);\n            return serverInstance;\n        } catch (error) {\n            console.error(`❌ Failed to start ${config.name} MCP server:`, error);\n            console.error(`❌ Command was: ${config.command} ${config.args.join(\" \")}`);\n            console.error(`❌ Environment variables:`, config.env);\n            throw error;\n        }\n    }\n    async stopServer(name) {\n        const server = this.servers.get(name);\n        if (server) {\n            console.log(`🛑 Stopping MCP server: ${name}`);\n            await server.client.close();\n            this.servers.delete(name);\n        }\n    }\n    getAllTools() {\n        const allTools = [];\n        for (const [serverName, serverInstance] of this.servers){\n            // Add server prefix to tool names to avoid conflicts\n            // Use underscore instead of colon for Anthropic API compatibility\n            const prefixedTools = serverInstance.tools.map((tool)=>({\n                    ...tool,\n                    name: `${serverName}_${tool.name}`,\n                    _originalName: tool.name,\n                    _serverName: serverName\n                }));\n            allTools.push(...prefixedTools);\n        }\n        return allTools;\n    }\n    async executeToolCall(toolName, args) {\n        // Parse server name and tool name from prefixed tool name\n        const [serverName, ...toolNameParts] = toolName.includes(\"_\") ? toolName.split(\"_\") : [\n            null,\n            toolName\n        ];\n        if (!serverName) {\n            throw new Error(`Tool ${toolName} does not specify a server`);\n        }\n        // Rejoin the tool name parts (in case tool name has underscores)\n        const originalToolName = toolNameParts.join(\"_\");\n        console.log(`🔍 Debug: toolName=${toolName}, serverName=${serverName}, originalToolName=${originalToolName}`);\n        const server = this.servers.get(serverName);\n        if (!server) {\n            throw new Error(`MCP server ${serverName} not found`);\n        }\n        console.log(`🔧 Executing ${serverName}:${originalToolName} with args:`, JSON.stringify(args, null, 2));\n        try {\n            const result = await server.client.callTool({\n                name: originalToolName,\n                arguments: args\n            });\n            console.log(`✅ Tool ${toolName} executed successfully`);\n            return result;\n        } catch (error) {\n            console.error(`❌ Tool ${toolName} execution failed:`, error);\n            throw error;\n        }\n    }\n    async cleanup() {\n        console.log(\"\\uD83E\\uDDF9 Cleaning up MCP servers...\");\n        const stopPromises = Array.from(this.servers.keys()).map((name)=>this.stopServer(name));\n        await Promise.all(stopPromises);\n        console.log(\"✅ All MCP servers stopped\");\n    }\n    // Helper method to start multiple servers\n    async startServers(configs) {\n        const enabledConfigs = configs.filter((config)=>config.enabled());\n        if (enabledConfigs.length === 0) {\n            console.warn(\"⚠️ No MCP servers are enabled\");\n            return;\n        }\n        console.log(`🚀 Starting ${enabledConfigs.length} MCP servers...`);\n        // Start servers sequentially to avoid overwhelming the system\n        for (const config of enabledConfigs){\n            try {\n                await this.startServer(config);\n            } catch (error) {\n                console.error(`❌ Failed to start ${config.name}, continuing with others...`);\n            // Continue with other servers instead of failing fast\n            // You can change this behavior based on your preferences\n            }\n        }\n        console.log(`✅ Started ${this.servers.size} MCP servers successfully`);\n    }\n    constructor(){\n        this.servers = new Map();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/mcp/manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/mcp/servers/index.ts":
/*!**********************************!*\
  !*** ./src/mcp/servers/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   availableServers: () => (/* binding */ availableServers),\n/* harmony export */   nestingMCP: () => (/* reexport safe */ _nesting__WEBPACK_IMPORTED_MODULE_1__.nestingMCP),\n/* harmony export */   supabaseMCP: () => (/* reexport safe */ _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseMCP),\n/* harmony export */   unfolderServerConfig: () => (/* reexport safe */ _unfolder__WEBPACK_IMPORTED_MODULE_2__.unfolderServerConfig)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./src/mcp/servers/supabase.ts\");\n/* harmony import */ var _nesting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nesting */ \"(rsc)/./src/mcp/servers/nesting.ts\");\n/* harmony import */ var _unfolder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unfolder */ \"(rsc)/./src/mcp/servers/unfolder.ts\");\n\n\n\n// Export all available MCP servers\nconst availableServers = [\n    _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseMCP,\n    _nesting__WEBPACK_IMPORTED_MODULE_1__.nestingMCP,\n    _unfolder__WEBPACK_IMPORTED_MODULE_2__.unfolderServerConfig\n];\n// Export individual servers for direct access if needed\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbWNwL3NlcnZlcnMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF5QztBQUNGO0FBQ1c7QUFHbEQsbUNBQW1DO0FBQzVCLE1BQU1HLG1CQUFzQztJQUNqREgsa0RBQVdBO0lBQ1hDLGdEQUFVQTtJQUNWQywyREFBb0JBO0NBQ3JCLENBQUM7QUFFRix3REFBd0Q7QUFDQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JyYWluLy4vc3JjL21jcC9zZXJ2ZXJzL2luZGV4LnRzP2YzYWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3VwYWJhc2VNQ1AgfSBmcm9tICcuL3N1cGFiYXNlJztcbmltcG9ydCB7IG5lc3RpbmdNQ1AgfSBmcm9tICcuL25lc3RpbmcnO1xuaW1wb3J0IHsgdW5mb2xkZXJTZXJ2ZXJDb25maWcgfSBmcm9tICcuL3VuZm9sZGVyJztcbmltcG9ydCB7IE1DUFNlcnZlckNvbmZpZyB9IGZyb20gJy4uL3R5cGVzJztcblxuLy8gRXhwb3J0IGFsbCBhdmFpbGFibGUgTUNQIHNlcnZlcnNcbmV4cG9ydCBjb25zdCBhdmFpbGFibGVTZXJ2ZXJzOiBNQ1BTZXJ2ZXJDb25maWdbXSA9IFtcbiAgc3VwYWJhc2VNQ1AsXG4gIG5lc3RpbmdNQ1AsXG4gIHVuZm9sZGVyU2VydmVyQ29uZmlnXG5dO1xuXG4vLyBFeHBvcnQgaW5kaXZpZHVhbCBzZXJ2ZXJzIGZvciBkaXJlY3QgYWNjZXNzIGlmIG5lZWRlZFxuZXhwb3J0IHsgc3VwYWJhc2VNQ1AsIG5lc3RpbmdNQ1AsIHVuZm9sZGVyU2VydmVyQ29uZmlnIH07Il0sIm5hbWVzIjpbInN1cGFiYXNlTUNQIiwibmVzdGluZ01DUCIsInVuZm9sZGVyU2VydmVyQ29uZmlnIiwiYXZhaWxhYmxlU2VydmVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/mcp/servers/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/mcp/servers/nesting.ts":
/*!************************************!*\
  !*** ./src/mcp/servers/nesting.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nestingMCP: () => (/* binding */ nestingMCP)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n\nconst nestingMCP = {\n    name: \"nesting\",\n    description: \"DXF part nesting functionality\",\n    command: \"python3\",\n    args: [\n        \"./src/mcp_servers/nesting/simple_server.py\"\n    ],\n    env: {\n        PYTHONPATH: path__WEBPACK_IMPORTED_MODULE_0___default().resolve(\"./src\"),\n        OUTPUT_DIR: \"/tmp/nesting_output\",\n        OUTPUT_NAME: \"nested_layout\"\n    },\n    enabled: ()=>true // Always available since it's self-contained\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbWNwL3NlcnZlcnMvbmVzdGluZy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDd0I7QUFFakIsTUFBTUMsYUFBOEI7SUFDekNDLE1BQU07SUFDTkMsYUFBYTtJQUNiQyxTQUFTO0lBQ1RDLE1BQU07UUFBQztLQUE2QztJQUNwREMsS0FBSztRQUNIQyxZQUFZUCxtREFBWSxDQUFDO1FBQ3pCUyxZQUFZO1FBQ1pDLGFBQWE7SUFDZjtJQUNBQyxTQUFTLElBQU0sS0FBSyw2Q0FBNkM7QUFDbkUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JyYWluLy4vc3JjL21jcC9zZXJ2ZXJzL25lc3RpbmcudHM/ZjQ4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNQ1BTZXJ2ZXJDb25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuZXhwb3J0IGNvbnN0IG5lc3RpbmdNQ1A6IE1DUFNlcnZlckNvbmZpZyA9IHtcbiAgbmFtZTogJ25lc3RpbmcnLFxuICBkZXNjcmlwdGlvbjogJ0RYRiBwYXJ0IG5lc3RpbmcgZnVuY3Rpb25hbGl0eScsXG4gIGNvbW1hbmQ6ICdweXRob24zJyxcbiAgYXJnczogWycuL3NyYy9tY3Bfc2VydmVycy9uZXN0aW5nL3NpbXBsZV9zZXJ2ZXIucHknXSxcbiAgZW52OiB7XG4gICAgUFlUSE9OUEFUSDogcGF0aC5yZXNvbHZlKCcuL3NyYycpLFxuICAgIE9VVFBVVF9ESVI6ICcvdG1wL25lc3Rpbmdfb3V0cHV0JyxcbiAgICBPVVRQVVRfTkFNRTogJ25lc3RlZF9sYXlvdXQnXG4gIH0sXG4gIGVuYWJsZWQ6ICgpID0+IHRydWUgLy8gQWx3YXlzIGF2YWlsYWJsZSBzaW5jZSBpdCdzIHNlbGYtY29udGFpbmVkXG59OyJdLCJuYW1lcyI6WyJwYXRoIiwibmVzdGluZ01DUCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImNvbW1hbmQiLCJhcmdzIiwiZW52IiwiUFlUSE9OUEFUSCIsInJlc29sdmUiLCJPVVRQVVRfRElSIiwiT1VUUFVUX05BTUUiLCJlbmFibGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/mcp/servers/nesting.ts\n");

/***/ }),

/***/ "(rsc)/./src/mcp/servers/supabase.ts":
/*!*************************************!*\
  !*** ./src/mcp/servers/supabase.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabaseMCP: () => (/* binding */ supabaseMCP)\n/* harmony export */ });\nconst supabaseMCP = {\n    name: \"supabase\",\n    description: \"Supabase database queries via PostgREST\",\n    command: \"npx\",\n    args: [\n        \"@supabase/mcp-server-postgrest\",\n        \"--apiUrl\",\n        `${process.env.SUPABASE_URL}/rest/v1`,\n        \"--apiKey\",\n        process.env.SUPABASE_KEY,\n        \"--schema\",\n        \"public\"\n    ],\n    env: {\n        NODE_ENV: \"production\"\n    },\n    enabled: ()=>!!(process.env.SUPABASE_URL && process.env.SUPABASE_KEY)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbWNwL3NlcnZlcnMvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUVPLE1BQU1BLGNBQStCO0lBQzFDQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsU0FBUztJQUNUQyxNQUFNO1FBQ0o7UUFDQTtRQUFZLENBQUMsRUFBRUMsUUFBUUMsR0FBRyxDQUFDQyxZQUFZLENBQUMsUUFBUSxDQUFDO1FBQ2pEO1FBQVlGLFFBQVFDLEdBQUcsQ0FBQ0UsWUFBWTtRQUNwQztRQUFZO0tBQ2I7SUFDREYsS0FBSztRQUNIRyxVQUFVO0lBQ1o7SUFDQUMsU0FBUyxJQUFNLENBQUMsQ0FBRUwsQ0FBQUEsUUFBUUMsR0FBRyxDQUFDQyxZQUFZLElBQUlGLFFBQVFDLEdBQUcsQ0FBQ0UsWUFBWTtBQUN4RSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJhaW4vLi9zcmMvbWNwL3NlcnZlcnMvc3VwYWJhc2UudHM/ODJiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNQ1BTZXJ2ZXJDb25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBzdXBhYmFzZU1DUDogTUNQU2VydmVyQ29uZmlnID0ge1xuICBuYW1lOiAnc3VwYWJhc2UnLFxuICBkZXNjcmlwdGlvbjogJ1N1cGFiYXNlIGRhdGFiYXNlIHF1ZXJpZXMgdmlhIFBvc3RnUkVTVCcsXG4gIGNvbW1hbmQ6ICducHgnLFxuICBhcmdzOiBbXG4gICAgJ0BzdXBhYmFzZS9tY3Atc2VydmVyLXBvc3RncmVzdCcsXG4gICAgJy0tYXBpVXJsJywgYCR7cHJvY2Vzcy5lbnYuU1VQQUJBU0VfVVJMfS9yZXN0L3YxYCxcbiAgICAnLS1hcGlLZXknLCBwcm9jZXNzLmVudi5TVVBBQkFTRV9LRVkhLFxuICAgICctLXNjaGVtYScsICdwdWJsaWMnXG4gIF0sXG4gIGVudjoge1xuICAgIE5PREVfRU5WOiAncHJvZHVjdGlvbidcbiAgfSxcbiAgZW5hYmxlZDogKCkgPT4gISEocHJvY2Vzcy5lbnYuU1VQQUJBU0VfVVJMICYmIHByb2Nlc3MuZW52LlNVUEFCQVNFX0tFWSlcbn07Il0sIm5hbWVzIjpbInN1cGFiYXNlTUNQIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiY29tbWFuZCIsImFyZ3MiLCJwcm9jZXNzIiwiZW52IiwiU1VQQUJBU0VfVVJMIiwiU1VQQUJBU0VfS0VZIiwiTk9ERV9FTlYiLCJlbmFibGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/mcp/servers/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./src/mcp/servers/unfolder.ts":
/*!*************************************!*\
  !*** ./src/mcp/servers/unfolder.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unfolderServerConfig: () => (/* binding */ unfolderServerConfig)\n/* harmony export */ });\nconst unfolderServerConfig = {\n    name: \"unfolder\",\n    command: \"node\",\n    args: [\n        \"./dist/src/mcp_servers/unfolder/server.js\"\n    ],\n    env: {\n        PYTHONPATH: \"/app/src\",\n        K_FACTOR: process.env.K_FACTOR || \"0.38\"\n    },\n    enabled: ()=>true\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbWNwL3NlcnZlcnMvdW5mb2xkZXIudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUVPLE1BQU1BLHVCQUF3QztJQUNuREMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLE1BQU07UUFBQztLQUE0QztJQUNuREMsS0FBSztRQUNIQyxZQUFZO1FBQ1pDLFVBQVVDLFFBQVFILEdBQUcsQ0FBQ0UsUUFBUSxJQUFJO0lBQ3BDO0lBQ0FFLFNBQVMsSUFBTTtBQUNqQixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJhaW4vLi9zcmMvbWNwL3NlcnZlcnMvdW5mb2xkZXIudHM/NDE4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNQ1BTZXJ2ZXJDb25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCB1bmZvbGRlclNlcnZlckNvbmZpZzogTUNQU2VydmVyQ29uZmlnID0ge1xuICBuYW1lOiAndW5mb2xkZXInLFxuICBjb21tYW5kOiAnbm9kZScsXG4gIGFyZ3M6IFsnLi9kaXN0L3NyYy9tY3Bfc2VydmVycy91bmZvbGRlci9zZXJ2ZXIuanMnXSxcbiAgZW52OiB7XG4gICAgUFlUSE9OUEFUSDogJy9hcHAvc3JjJyxcbiAgICBLX0ZBQ1RPUjogcHJvY2Vzcy5lbnYuS19GQUNUT1IgfHwgJzAuMzgnLFxuICB9LFxuICBlbmFibGVkOiAoKSA9PiB0cnVlLCAvLyBBbHdheXMgZW5hYmxlZFxufTsiXSwibmFtZXMiOlsidW5mb2xkZXJTZXJ2ZXJDb25maWciLCJuYW1lIiwiY29tbWFuZCIsImFyZ3MiLCJlbnYiLCJQWVRIT05QQVRIIiwiS19GQUNUT1IiLCJwcm9jZXNzIiwiZW5hYmxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/mcp/servers/unfolder.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/ajv","vendor-chunks/next","vendor-chunks/zod","vendor-chunks/@modelcontextprotocol","vendor-chunks/uri-js","vendor-chunks/dotenv","vendor-chunks/cross-spawn","vendor-chunks/which","vendor-chunks/isexe","vendor-chunks/json-schema-traverse","vendor-chunks/fast-json-stable-stringify","vendor-chunks/fast-deep-equal","vendor-chunks/path-key","vendor-chunks/shebang-command","vendor-chunks/shebang-regex","vendor-chunks/formdata-node","vendor-chunks/tr46","vendor-chunks/@anthropic-ai","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fworkflow%2Froute&page=%2Fapi%2Fworkflow%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fworkflow%2Froute.ts&appDir=%2FUsers%2Falessiotoniolo%2Fmonorepo%2Fbrain%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falessiotoniolo%2Fmonorepo%2Fbrain&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();