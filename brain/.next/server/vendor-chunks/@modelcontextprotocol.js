"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@modelcontextprotocol";
exports.ids = ["vendor-chunks/@modelcontextprotocol"];
exports.modules = {

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client)\n/* harmony export */ });\n/* harmony import */ var _shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/protocol.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ajv */ \"(rsc)/./node_modules/ajv/lib/ajv.js\");\n\n\n\n/**\n * An MCP client on top of a pluggable transport.\n *\n * The client will automatically begin the initialization flow with the server when connect() is called.\n *\n * To use with custom types, extend the base Request/Notification/Result types and pass them as type parameters:\n *\n * ```typescript\n * // Custom schemas\n * const CustomRequestSchema = RequestSchema.extend({...})\n * const CustomNotificationSchema = NotificationSchema.extend({...})\n * const CustomResultSchema = ResultSchema.extend({...})\n *\n * // Type aliases\n * type CustomRequest = z.infer<typeof CustomRequestSchema>\n * type CustomNotification = z.infer<typeof CustomNotificationSchema>\n * type CustomResult = z.infer<typeof CustomResultSchema>\n *\n * // Create typed client\n * const client = new Client<CustomRequest, CustomNotification, CustomResult>({\n *   name: \"CustomClient\",\n *   version: \"1.0.0\"\n * })\n * ```\n */\nclass Client extends _shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__.Protocol {\n    /**\n     * Initializes this client with the given name and version information.\n     */\n    constructor(_clientInfo, options) {\n        var _a;\n        super(options);\n        this._clientInfo = _clientInfo;\n        this._cachedToolOutputValidators = new Map();\n        this._capabilities = (_a = options === null || options === void 0 ? void 0 : options.capabilities) !== null && _a !== void 0 ? _a : {};\n        this._ajv = new ajv__WEBPACK_IMPORTED_MODULE_2__();\n    }\n    /**\n     * Registers new capabilities. This can only be called before connecting to a transport.\n     *\n     * The new capabilities will be merged with any existing capabilities previously given (e.g., at initialization).\n     */\n    registerCapabilities(capabilities) {\n        if (this.transport) {\n            throw new Error(\"Cannot register capabilities after connecting to transport\");\n        }\n        this._capabilities = (0,_shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__.mergeCapabilities)(this._capabilities, capabilities);\n    }\n    assertCapability(capability, method) {\n        var _a;\n        if (!((_a = this._serverCapabilities) === null || _a === void 0 ? void 0 : _a[capability])) {\n            throw new Error(`Server does not support ${capability} (required for ${method})`);\n        }\n    }\n    async connect(transport, options) {\n        await super.connect(transport);\n        // When transport sessionId is already set this means we are trying to reconnect.\n        // In this case we don't need to initialize again.\n        if (transport.sessionId !== undefined) {\n            return;\n        }\n        try {\n            const result = await this.request({\n                method: \"initialize\",\n                params: {\n                    protocolVersion: _types_js__WEBPACK_IMPORTED_MODULE_1__.LATEST_PROTOCOL_VERSION,\n                    capabilities: this._capabilities,\n                    clientInfo: this._clientInfo,\n                },\n            }, _types_js__WEBPACK_IMPORTED_MODULE_1__.InitializeResultSchema, options);\n            if (result === undefined) {\n                throw new Error(`Server sent invalid initialize result: ${result}`);\n            }\n            if (!_types_js__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_PROTOCOL_VERSIONS.includes(result.protocolVersion)) {\n                throw new Error(`Server's protocol version is not supported: ${result.protocolVersion}`);\n            }\n            this._serverCapabilities = result.capabilities;\n            this._serverVersion = result.serverInfo;\n            this._instructions = result.instructions;\n            await this.notification({\n                method: \"notifications/initialized\",\n            });\n        }\n        catch (error) {\n            // Disconnect if initialization fails.\n            void this.close();\n            throw error;\n        }\n    }\n    /**\n     * After initialization has completed, this will be populated with the server's reported capabilities.\n     */\n    getServerCapabilities() {\n        return this._serverCapabilities;\n    }\n    /**\n     * After initialization has completed, this will be populated with information about the server's name and version.\n     */\n    getServerVersion() {\n        return this._serverVersion;\n    }\n    /**\n     * After initialization has completed, this may be populated with information about the server's instructions.\n     */\n    getInstructions() {\n        return this._instructions;\n    }\n    assertCapabilityForMethod(method) {\n        var _a, _b, _c, _d, _e;\n        switch (method) {\n            case \"logging/setLevel\":\n                if (!((_a = this._serverCapabilities) === null || _a === void 0 ? void 0 : _a.logging)) {\n                    throw new Error(`Server does not support logging (required for ${method})`);\n                }\n                break;\n            case \"prompts/get\":\n            case \"prompts/list\":\n                if (!((_b = this._serverCapabilities) === null || _b === void 0 ? void 0 : _b.prompts)) {\n                    throw new Error(`Server does not support prompts (required for ${method})`);\n                }\n                break;\n            case \"resources/list\":\n            case \"resources/templates/list\":\n            case \"resources/read\":\n            case \"resources/subscribe\":\n            case \"resources/unsubscribe\":\n                if (!((_c = this._serverCapabilities) === null || _c === void 0 ? void 0 : _c.resources)) {\n                    throw new Error(`Server does not support resources (required for ${method})`);\n                }\n                if (method === \"resources/subscribe\" &&\n                    !this._serverCapabilities.resources.subscribe) {\n                    throw new Error(`Server does not support resource subscriptions (required for ${method})`);\n                }\n                break;\n            case \"tools/call\":\n            case \"tools/list\":\n                if (!((_d = this._serverCapabilities) === null || _d === void 0 ? void 0 : _d.tools)) {\n                    throw new Error(`Server does not support tools (required for ${method})`);\n                }\n                break;\n            case \"completion/complete\":\n                if (!((_e = this._serverCapabilities) === null || _e === void 0 ? void 0 : _e.completions)) {\n                    throw new Error(`Server does not support completions (required for ${method})`);\n                }\n                break;\n            case \"initialize\":\n                // No specific capability required for initialize\n                break;\n            case \"ping\":\n                // No specific capability required for ping\n                break;\n        }\n    }\n    assertNotificationCapability(method) {\n        var _a;\n        switch (method) {\n            case \"notifications/roots/list_changed\":\n                if (!((_a = this._capabilities.roots) === null || _a === void 0 ? void 0 : _a.listChanged)) {\n                    throw new Error(`Client does not support roots list changed notifications (required for ${method})`);\n                }\n                break;\n            case \"notifications/initialized\":\n                // No specific capability required for initialized\n                break;\n            case \"notifications/cancelled\":\n                // Cancellation notifications are always allowed\n                break;\n            case \"notifications/progress\":\n                // Progress notifications are always allowed\n                break;\n        }\n    }\n    assertRequestHandlerCapability(method) {\n        switch (method) {\n            case \"sampling/createMessage\":\n                if (!this._capabilities.sampling) {\n                    throw new Error(`Client does not support sampling capability (required for ${method})`);\n                }\n                break;\n            case \"roots/list\":\n                if (!this._capabilities.roots) {\n                    throw new Error(`Client does not support roots capability (required for ${method})`);\n                }\n                break;\n            case \"ping\":\n                // No specific capability required for ping\n                break;\n        }\n    }\n    async ping(options) {\n        return this.request({ method: \"ping\" }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema, options);\n    }\n    async complete(params, options) {\n        return this.request({ method: \"completion/complete\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.CompleteResultSchema, options);\n    }\n    async setLoggingLevel(level, options) {\n        return this.request({ method: \"logging/setLevel\", params: { level } }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema, options);\n    }\n    async getPrompt(params, options) {\n        return this.request({ method: \"prompts/get\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.GetPromptResultSchema, options);\n    }\n    async listPrompts(params, options) {\n        return this.request({ method: \"prompts/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListPromptsResultSchema, options);\n    }\n    async listResources(params, options) {\n        return this.request({ method: \"resources/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListResourcesResultSchema, options);\n    }\n    async listResourceTemplates(params, options) {\n        return this.request({ method: \"resources/templates/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListResourceTemplatesResultSchema, options);\n    }\n    async readResource(params, options) {\n        return this.request({ method: \"resources/read\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ReadResourceResultSchema, options);\n    }\n    async subscribeResource(params, options) {\n        return this.request({ method: \"resources/subscribe\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema, options);\n    }\n    async unsubscribeResource(params, options) {\n        return this.request({ method: \"resources/unsubscribe\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema, options);\n    }\n    async callTool(params, resultSchema = _types_js__WEBPACK_IMPORTED_MODULE_1__.CallToolResultSchema, options) {\n        const result = await this.request({ method: \"tools/call\", params }, resultSchema, options);\n        // Check if the tool has an outputSchema\n        const validator = this.getToolOutputValidator(params.name);\n        if (validator) {\n            // If tool has outputSchema, it MUST return structuredContent (unless it's an error)\n            if (!result.structuredContent && !result.isError) {\n                throw new _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.InvalidRequest, `Tool ${params.name} has an output schema but did not return structured content`);\n            }\n            // Only validate structured content if present (not when there's an error)\n            if (result.structuredContent) {\n                try {\n                    // Validate the structured content (which is already an object) against the schema\n                    const isValid = validator(result.structuredContent);\n                    if (!isValid) {\n                        throw new _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.InvalidParams, `Structured content does not match the tool's output schema: ${this._ajv.errorsText(validator.errors)}`);\n                    }\n                }\n                catch (error) {\n                    if (error instanceof _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError) {\n                        throw error;\n                    }\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.InvalidParams, `Failed to validate structured content: ${error instanceof Error ? error.message : String(error)}`);\n                }\n            }\n        }\n        return result;\n    }\n    cacheToolOutputSchemas(tools) {\n        this._cachedToolOutputValidators.clear();\n        for (const tool of tools) {\n            // If the tool has an outputSchema, create and cache the Ajv validator\n            if (tool.outputSchema) {\n                try {\n                    const validator = this._ajv.compile(tool.outputSchema);\n                    this._cachedToolOutputValidators.set(tool.name, validator);\n                }\n                catch (error) {\n                    console.warn(`Failed to compile output schema for tool ${tool.name}: ${error}`);\n                }\n            }\n        }\n    }\n    getToolOutputValidator(toolName) {\n        return this._cachedToolOutputValidators.get(toolName);\n    }\n    async listTools(params, options) {\n        const result = await this.request({ method: \"tools/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListToolsResultSchema, options);\n        // Cache the tools and their output schemas for future validation\n        this.cacheToolOutputSchemas(result.tools);\n        return result;\n    }\n    async sendRootsListChanged() {\n        return this.notification({ method: \"notifications/roots/list_changed\" });\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_INHERITED_ENV_VARS: () => (/* binding */ DEFAULT_INHERITED_ENV_VARS),\n/* harmony export */   StdioClientTransport: () => (/* binding */ StdioClientTransport),\n/* harmony export */   getDefaultEnvironment: () => (/* binding */ getDefaultEnvironment)\n/* harmony export */ });\n/* harmony import */ var cross_spawn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-spawn */ \"(rsc)/./node_modules/cross-spawn/index.js\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:process */ \"node:process\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _shared_stdio_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/stdio.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js\");\n\n\n\n\n/**\n * Environment variables to inherit by default, if an environment is not explicitly given.\n */\nconst DEFAULT_INHERITED_ENV_VARS = node_process__WEBPACK_IMPORTED_MODULE_1__.platform === \"win32\"\n    ? [\n        \"APPDATA\",\n        \"HOMEDRIVE\",\n        \"HOMEPATH\",\n        \"LOCALAPPDATA\",\n        \"PATH\",\n        \"PROCESSOR_ARCHITECTURE\",\n        \"SYSTEMDRIVE\",\n        \"SYSTEMROOT\",\n        \"TEMP\",\n        \"USERNAME\",\n        \"USERPROFILE\",\n    ]\n    : /* list inspired by the default env inheritance of sudo */\n        [\"HOME\", \"LOGNAME\", \"PATH\", \"SHELL\", \"TERM\", \"USER\"];\n/**\n * Returns a default environment object including only environment variables deemed safe to inherit.\n */\nfunction getDefaultEnvironment() {\n    const env = {};\n    for (const key of DEFAULT_INHERITED_ENV_VARS) {\n        const value = node_process__WEBPACK_IMPORTED_MODULE_1__.env[key];\n        if (value === undefined) {\n            continue;\n        }\n        if (value.startsWith(\"()\")) {\n            // Skip functions, which are a security risk.\n            continue;\n        }\n        env[key] = value;\n    }\n    return env;\n}\n/**\n * Client transport for stdio: this will connect to a server by spawning a process and communicating with it over stdin/stdout.\n *\n * This transport is only available in Node.js environments.\n */\nclass StdioClientTransport {\n    constructor(server) {\n        this._abortController = new AbortController();\n        this._readBuffer = new _shared_stdio_js__WEBPACK_IMPORTED_MODULE_3__.ReadBuffer();\n        this._stderrStream = null;\n        this._serverParams = server;\n        if (server.stderr === \"pipe\" || server.stderr === \"overlapped\") {\n            this._stderrStream = new node_stream__WEBPACK_IMPORTED_MODULE_2__.PassThrough();\n        }\n    }\n    /**\n     * Starts the server process and prepares to communicate with it.\n     */\n    async start() {\n        if (this._process) {\n            throw new Error(\"StdioClientTransport already started! If using Client class, note that connect() calls start() automatically.\");\n        }\n        return new Promise((resolve, reject) => {\n            var _a, _b, _c, _d, _e, _f;\n            this._process = cross_spawn__WEBPACK_IMPORTED_MODULE_0__(this._serverParams.command, (_a = this._serverParams.args) !== null && _a !== void 0 ? _a : [], {\n                env: (_b = this._serverParams.env) !== null && _b !== void 0 ? _b : getDefaultEnvironment(),\n                stdio: [\"pipe\", \"pipe\", (_c = this._serverParams.stderr) !== null && _c !== void 0 ? _c : \"inherit\"],\n                shell: false,\n                signal: this._abortController.signal,\n                windowsHide: node_process__WEBPACK_IMPORTED_MODULE_1__.platform === \"win32\" && isElectron(),\n                cwd: this._serverParams.cwd,\n            });\n            this._process.on(\"error\", (error) => {\n                var _a, _b;\n                if (error.name === \"AbortError\") {\n                    // Expected when close() is called.\n                    (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);\n                    return;\n                }\n                reject(error);\n                (_b = this.onerror) === null || _b === void 0 ? void 0 : _b.call(this, error);\n            });\n            this._process.on(\"spawn\", () => {\n                resolve();\n            });\n            this._process.on(\"close\", (_code) => {\n                var _a;\n                this._process = undefined;\n                (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);\n            });\n            (_d = this._process.stdin) === null || _d === void 0 ? void 0 : _d.on(\"error\", (error) => {\n                var _a;\n                (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            });\n            (_e = this._process.stdout) === null || _e === void 0 ? void 0 : _e.on(\"data\", (chunk) => {\n                this._readBuffer.append(chunk);\n                this.processReadBuffer();\n            });\n            (_f = this._process.stdout) === null || _f === void 0 ? void 0 : _f.on(\"error\", (error) => {\n                var _a;\n                (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            });\n            if (this._stderrStream && this._process.stderr) {\n                this._process.stderr.pipe(this._stderrStream);\n            }\n        });\n    }\n    /**\n     * The stderr stream of the child process, if `StdioServerParameters.stderr` was set to \"pipe\" or \"overlapped\".\n     *\n     * If stderr piping was requested, a PassThrough stream is returned _immediately_, allowing callers to\n     * attach listeners before the start method is invoked. This prevents loss of any early\n     * error output emitted by the child process.\n     */\n    get stderr() {\n        var _a, _b;\n        if (this._stderrStream) {\n            return this._stderrStream;\n        }\n        return (_b = (_a = this._process) === null || _a === void 0 ? void 0 : _a.stderr) !== null && _b !== void 0 ? _b : null;\n    }\n    processReadBuffer() {\n        var _a, _b;\n        while (true) {\n            try {\n                const message = this._readBuffer.readMessage();\n                if (message === null) {\n                    break;\n                }\n                (_a = this.onmessage) === null || _a === void 0 ? void 0 : _a.call(this, message);\n            }\n            catch (error) {\n                (_b = this.onerror) === null || _b === void 0 ? void 0 : _b.call(this, error);\n            }\n        }\n    }\n    async close() {\n        this._abortController.abort();\n        this._process = undefined;\n        this._readBuffer.clear();\n    }\n    send(message) {\n        return new Promise((resolve) => {\n            var _a;\n            if (!((_a = this._process) === null || _a === void 0 ? void 0 : _a.stdin)) {\n                throw new Error(\"Not connected\");\n            }\n            const json = (0,_shared_stdio_js__WEBPACK_IMPORTED_MODULE_3__.serializeMessage)(message);\n            if (this._process.stdin.write(json)) {\n                resolve();\n            }\n            else {\n                this._process.stdin.once(\"drain\", resolve);\n            }\n        });\n    }\n}\nfunction isElectron() {\n    return \"type\" in node_process__WEBPACK_IMPORTED_MODULE_1__;\n}\n//# sourceMappingURL=stdio.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_REQUEST_TIMEOUT_MSEC: () => (/* binding */ DEFAULT_REQUEST_TIMEOUT_MSEC),\n/* harmony export */   Protocol: () => (/* binding */ Protocol),\n/* harmony export */   mergeCapabilities: () => (/* binding */ mergeCapabilities)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n\n/**\n * The default request timeout, in miliseconds.\n */\nconst DEFAULT_REQUEST_TIMEOUT_MSEC = 60000;\n/**\n * Implements MCP protocol framing on top of a pluggable transport, including\n * features like request/response linking, notifications, and progress.\n */\nclass Protocol {\n    constructor(_options) {\n        this._options = _options;\n        this._requestMessageId = 0;\n        this._requestHandlers = new Map();\n        this._requestHandlerAbortControllers = new Map();\n        this._notificationHandlers = new Map();\n        this._responseHandlers = new Map();\n        this._progressHandlers = new Map();\n        this._timeoutInfo = new Map();\n        this.setNotificationHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.CancelledNotificationSchema, (notification) => {\n            const controller = this._requestHandlerAbortControllers.get(notification.params.requestId);\n            controller === null || controller === void 0 ? void 0 : controller.abort(notification.params.reason);\n        });\n        this.setNotificationHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.ProgressNotificationSchema, (notification) => {\n            this._onprogress(notification);\n        });\n        this.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.PingRequestSchema, \n        // Automatic pong by default.\n        (_request) => ({}));\n    }\n    _setupTimeout(messageId, timeout, maxTotalTimeout, onTimeout, resetTimeoutOnProgress = false) {\n        this._timeoutInfo.set(messageId, {\n            timeoutId: setTimeout(onTimeout, timeout),\n            startTime: Date.now(),\n            timeout,\n            maxTotalTimeout,\n            resetTimeoutOnProgress,\n            onTimeout\n        });\n    }\n    _resetTimeout(messageId) {\n        const info = this._timeoutInfo.get(messageId);\n        if (!info)\n            return false;\n        const totalElapsed = Date.now() - info.startTime;\n        if (info.maxTotalTimeout && totalElapsed >= info.maxTotalTimeout) {\n            this._timeoutInfo.delete(messageId);\n            throw new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.RequestTimeout, \"Maximum total timeout exceeded\", { maxTotalTimeout: info.maxTotalTimeout, totalElapsed });\n        }\n        clearTimeout(info.timeoutId);\n        info.timeoutId = setTimeout(info.onTimeout, info.timeout);\n        return true;\n    }\n    _cleanupTimeout(messageId) {\n        const info = this._timeoutInfo.get(messageId);\n        if (info) {\n            clearTimeout(info.timeoutId);\n            this._timeoutInfo.delete(messageId);\n        }\n    }\n    /**\n     * Attaches to the given transport, starts it, and starts listening for messages.\n     *\n     * The Protocol object assumes ownership of the Transport, replacing any callbacks that have already been set, and expects that it is the only user of the Transport instance going forward.\n     */\n    async connect(transport) {\n        this._transport = transport;\n        this._transport.onclose = () => {\n            this._onclose();\n        };\n        this._transport.onerror = (error) => {\n            this._onerror(error);\n        };\n        this._transport.onmessage = (message, extra) => {\n            if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCResponse)(message) || (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCError)(message)) {\n                this._onresponse(message);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCRequest)(message)) {\n                this._onrequest(message, extra);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCNotification)(message)) {\n                this._onnotification(message);\n            }\n            else {\n                this._onerror(new Error(`Unknown message type: ${JSON.stringify(message)}`));\n            }\n        };\n        await this._transport.start();\n    }\n    _onclose() {\n        var _a;\n        const responseHandlers = this._responseHandlers;\n        this._responseHandlers = new Map();\n        this._progressHandlers.clear();\n        this._transport = undefined;\n        (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);\n        const error = new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ConnectionClosed, \"Connection closed\");\n        for (const handler of responseHandlers.values()) {\n            handler(error);\n        }\n    }\n    _onerror(error) {\n        var _a;\n        (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n    }\n    _onnotification(notification) {\n        var _a;\n        const handler = (_a = this._notificationHandlers.get(notification.method)) !== null && _a !== void 0 ? _a : this.fallbackNotificationHandler;\n        // Ignore notifications not being subscribed to.\n        if (handler === undefined) {\n            return;\n        }\n        // Starting with Promise.resolve() puts any synchronous errors into the monad as well.\n        Promise.resolve()\n            .then(() => handler(notification))\n            .catch((error) => this._onerror(new Error(`Uncaught error in notification handler: ${error}`)));\n    }\n    _onrequest(request, extra) {\n        var _a, _b, _c, _d;\n        const handler = (_a = this._requestHandlers.get(request.method)) !== null && _a !== void 0 ? _a : this.fallbackRequestHandler;\n        if (handler === undefined) {\n            (_b = this._transport) === null || _b === void 0 ? void 0 : _b.send({\n                jsonrpc: \"2.0\",\n                id: request.id,\n                error: {\n                    code: _types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.MethodNotFound,\n                    message: \"Method not found\",\n                },\n            }).catch((error) => this._onerror(new Error(`Failed to send an error response: ${error}`)));\n            return;\n        }\n        const abortController = new AbortController();\n        this._requestHandlerAbortControllers.set(request.id, abortController);\n        const fullExtra = {\n            signal: abortController.signal,\n            sessionId: (_c = this._transport) === null || _c === void 0 ? void 0 : _c.sessionId,\n            _meta: (_d = request.params) === null || _d === void 0 ? void 0 : _d._meta,\n            sendNotification: (notification) => this.notification(notification, { relatedRequestId: request.id }),\n            sendRequest: (r, resultSchema, options) => this.request(r, resultSchema, { ...options, relatedRequestId: request.id }),\n            authInfo: extra === null || extra === void 0 ? void 0 : extra.authInfo,\n            requestId: request.id,\n        };\n        // Starting with Promise.resolve() puts any synchronous errors into the monad as well.\n        Promise.resolve()\n            .then(() => handler(request, fullExtra))\n            .then((result) => {\n            var _a;\n            if (abortController.signal.aborted) {\n                return;\n            }\n            return (_a = this._transport) === null || _a === void 0 ? void 0 : _a.send({\n                result,\n                jsonrpc: \"2.0\",\n                id: request.id,\n            });\n        }, (error) => {\n            var _a, _b;\n            if (abortController.signal.aborted) {\n                return;\n            }\n            return (_a = this._transport) === null || _a === void 0 ? void 0 : _a.send({\n                jsonrpc: \"2.0\",\n                id: request.id,\n                error: {\n                    code: Number.isSafeInteger(error[\"code\"])\n                        ? error[\"code\"]\n                        : _types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.InternalError,\n                    message: (_b = error.message) !== null && _b !== void 0 ? _b : \"Internal error\",\n                },\n            });\n        })\n            .catch((error) => this._onerror(new Error(`Failed to send response: ${error}`)))\n            .finally(() => {\n            this._requestHandlerAbortControllers.delete(request.id);\n        });\n    }\n    _onprogress(notification) {\n        const { progressToken, ...params } = notification.params;\n        const messageId = Number(progressToken);\n        const handler = this._progressHandlers.get(messageId);\n        if (!handler) {\n            this._onerror(new Error(`Received a progress notification for an unknown token: ${JSON.stringify(notification)}`));\n            return;\n        }\n        const responseHandler = this._responseHandlers.get(messageId);\n        const timeoutInfo = this._timeoutInfo.get(messageId);\n        if (timeoutInfo && responseHandler && timeoutInfo.resetTimeoutOnProgress) {\n            try {\n                this._resetTimeout(messageId);\n            }\n            catch (error) {\n                responseHandler(error);\n                return;\n            }\n        }\n        handler(params);\n    }\n    _onresponse(response) {\n        const messageId = Number(response.id);\n        const handler = this._responseHandlers.get(messageId);\n        if (handler === undefined) {\n            this._onerror(new Error(`Received a response for an unknown message ID: ${JSON.stringify(response)}`));\n            return;\n        }\n        this._responseHandlers.delete(messageId);\n        this._progressHandlers.delete(messageId);\n        this._cleanupTimeout(messageId);\n        if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCResponse)(response)) {\n            handler(response);\n        }\n        else {\n            const error = new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(response.error.code, response.error.message, response.error.data);\n            handler(error);\n        }\n    }\n    get transport() {\n        return this._transport;\n    }\n    /**\n     * Closes the connection.\n     */\n    async close() {\n        var _a;\n        await ((_a = this._transport) === null || _a === void 0 ? void 0 : _a.close());\n    }\n    /**\n     * Sends a request and wait for a response.\n     *\n     * Do not use this method to emit notifications! Use notification() instead.\n     */\n    request(request, resultSchema, options) {\n        const { relatedRequestId, resumptionToken, onresumptiontoken } = options !== null && options !== void 0 ? options : {};\n        return new Promise((resolve, reject) => {\n            var _a, _b, _c, _d, _e, _f;\n            if (!this._transport) {\n                reject(new Error(\"Not connected\"));\n                return;\n            }\n            if (((_a = this._options) === null || _a === void 0 ? void 0 : _a.enforceStrictCapabilities) === true) {\n                this.assertCapabilityForMethod(request.method);\n            }\n            (_b = options === null || options === void 0 ? void 0 : options.signal) === null || _b === void 0 ? void 0 : _b.throwIfAborted();\n            const messageId = this._requestMessageId++;\n            const jsonrpcRequest = {\n                ...request,\n                jsonrpc: \"2.0\",\n                id: messageId,\n            };\n            if (options === null || options === void 0 ? void 0 : options.onprogress) {\n                this._progressHandlers.set(messageId, options.onprogress);\n                jsonrpcRequest.params = {\n                    ...request.params,\n                    _meta: {\n                        ...(((_c = request.params) === null || _c === void 0 ? void 0 : _c._meta) || {}),\n                        progressToken: messageId\n                    },\n                };\n            }\n            const cancel = (reason) => {\n                var _a;\n                this._responseHandlers.delete(messageId);\n                this._progressHandlers.delete(messageId);\n                this._cleanupTimeout(messageId);\n                (_a = this._transport) === null || _a === void 0 ? void 0 : _a.send({\n                    jsonrpc: \"2.0\",\n                    method: \"notifications/cancelled\",\n                    params: {\n                        requestId: messageId,\n                        reason: String(reason),\n                    },\n                }, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => this._onerror(new Error(`Failed to send cancellation: ${error}`)));\n                reject(reason);\n            };\n            this._responseHandlers.set(messageId, (response) => {\n                var _a;\n                if ((_a = options === null || options === void 0 ? void 0 : options.signal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    return;\n                }\n                if (response instanceof Error) {\n                    return reject(response);\n                }\n                try {\n                    const result = resultSchema.parse(response.result);\n                    resolve(result);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n            (_d = options === null || options === void 0 ? void 0 : options.signal) === null || _d === void 0 ? void 0 : _d.addEventListener(\"abort\", () => {\n                var _a;\n                cancel((_a = options === null || options === void 0 ? void 0 : options.signal) === null || _a === void 0 ? void 0 : _a.reason);\n            });\n            const timeout = (_e = options === null || options === void 0 ? void 0 : options.timeout) !== null && _e !== void 0 ? _e : DEFAULT_REQUEST_TIMEOUT_MSEC;\n            const timeoutHandler = () => cancel(new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.RequestTimeout, \"Request timed out\", { timeout }));\n            this._setupTimeout(messageId, timeout, options === null || options === void 0 ? void 0 : options.maxTotalTimeout, timeoutHandler, (_f = options === null || options === void 0 ? void 0 : options.resetTimeoutOnProgress) !== null && _f !== void 0 ? _f : false);\n            this._transport.send(jsonrpcRequest, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => {\n                this._cleanupTimeout(messageId);\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Emits a notification, which is a one-way message that does not expect a response.\n     */\n    async notification(notification, options) {\n        if (!this._transport) {\n            throw new Error(\"Not connected\");\n        }\n        this.assertNotificationCapability(notification.method);\n        const jsonrpcNotification = {\n            ...notification,\n            jsonrpc: \"2.0\",\n        };\n        await this._transport.send(jsonrpcNotification, options);\n    }\n    /**\n     * Registers a handler to invoke when this protocol object receives a request with the given method.\n     *\n     * Note that this will replace any previous request handler for the same method.\n     */\n    setRequestHandler(requestSchema, handler) {\n        const method = requestSchema.shape.method.value;\n        this.assertRequestHandlerCapability(method);\n        this._requestHandlers.set(method, (request, extra) => {\n            return Promise.resolve(handler(requestSchema.parse(request), extra));\n        });\n    }\n    /**\n     * Removes the request handler for the given method.\n     */\n    removeRequestHandler(method) {\n        this._requestHandlers.delete(method);\n    }\n    /**\n     * Asserts that a request handler has not already been set for the given method, in preparation for a new one being automatically installed.\n     */\n    assertCanSetRequestHandler(method) {\n        if (this._requestHandlers.has(method)) {\n            throw new Error(`A request handler for ${method} already exists, which would be overridden`);\n        }\n    }\n    /**\n     * Registers a handler to invoke when this protocol object receives a notification with the given method.\n     *\n     * Note that this will replace any previous notification handler for the same method.\n     */\n    setNotificationHandler(notificationSchema, handler) {\n        this._notificationHandlers.set(notificationSchema.shape.method.value, (notification) => Promise.resolve(handler(notificationSchema.parse(notification))));\n    }\n    /**\n     * Removes the notification handler for the given method.\n     */\n    removeNotificationHandler(method) {\n        this._notificationHandlers.delete(method);\n    }\n}\nfunction mergeCapabilities(base, additional) {\n    return Object.entries(additional).reduce((acc, [key, value]) => {\n        if (value && typeof value === \"object\") {\n            acc[key] = acc[key] ? { ...acc[key], ...value } : value;\n        }\n        else {\n            acc[key] = value;\n        }\n        return acc;\n    }, { ...base });\n}\n//# sourceMappingURL=protocol.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReadBuffer: () => (/* binding */ ReadBuffer),\n/* harmony export */   deserializeMessage: () => (/* binding */ deserializeMessage),\n/* harmony export */   serializeMessage: () => (/* binding */ serializeMessage)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n\n/**\n * Buffers a continuous stdio stream into discrete JSON-RPC messages.\n */\nclass ReadBuffer {\n    append(chunk) {\n        this._buffer = this._buffer ? Buffer.concat([this._buffer, chunk]) : chunk;\n    }\n    readMessage() {\n        if (!this._buffer) {\n            return null;\n        }\n        const index = this._buffer.indexOf(\"\\n\");\n        if (index === -1) {\n            return null;\n        }\n        const line = this._buffer.toString(\"utf8\", 0, index).replace(/\\r$/, '');\n        this._buffer = this._buffer.subarray(index + 1);\n        return deserializeMessage(line);\n    }\n    clear() {\n        this._buffer = undefined;\n    }\n}\nfunction deserializeMessage(line) {\n    return _types_js__WEBPACK_IMPORTED_MODULE_0__.JSONRPCMessageSchema.parse(JSON.parse(line));\n}\nfunction serializeMessage(message) {\n    return JSON.stringify(message) + \"\\n\";\n}\n//# sourceMappingURL=stdio.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zaGFyZWQvc3RkaW8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDJEQUFvQjtBQUMvQjtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJhaW4vLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zaGFyZWQvc3RkaW8uanM/Zjk2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKU09OUlBDTWVzc2FnZVNjaGVtYSB9IGZyb20gXCIuLi90eXBlcy5qc1wiO1xuLyoqXG4gKiBCdWZmZXJzIGEgY29udGludW91cyBzdGRpbyBzdHJlYW0gaW50byBkaXNjcmV0ZSBKU09OLVJQQyBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWRCdWZmZXIge1xuICAgIGFwcGVuZChjaHVuaykge1xuICAgICAgICB0aGlzLl9idWZmZXIgPSB0aGlzLl9idWZmZXIgPyBCdWZmZXIuY29uY2F0KFt0aGlzLl9idWZmZXIsIGNodW5rXSkgOiBjaHVuaztcbiAgICB9XG4gICAgcmVhZE1lc3NhZ2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5fYnVmZmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2J1ZmZlci5pbmRleE9mKFwiXFxuXCIpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5fYnVmZmVyLnRvU3RyaW5nKFwidXRmOFwiLCAwLCBpbmRleCkucmVwbGFjZSgvXFxyJC8sICcnKTtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gdGhpcy5fYnVmZmVyLnN1YmFycmF5KGluZGV4ICsgMSk7XG4gICAgICAgIHJldHVybiBkZXNlcmlhbGl6ZU1lc3NhZ2UobGluZSk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9idWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRlc2VyaWFsaXplTWVzc2FnZShsaW5lKSB7XG4gICAgcmV0dXJuIEpTT05SUENNZXNzYWdlU2NoZW1hLnBhcnNlKEpTT04ucGFyc2UobGluZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSArIFwiXFxuXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGRpby5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioContentSchema: () => (/* binding */ AudioContentSchema),\n/* harmony export */   BlobResourceContentsSchema: () => (/* binding */ BlobResourceContentsSchema),\n/* harmony export */   CallToolRequestSchema: () => (/* binding */ CallToolRequestSchema),\n/* harmony export */   CallToolResultSchema: () => (/* binding */ CallToolResultSchema),\n/* harmony export */   CancelledNotificationSchema: () => (/* binding */ CancelledNotificationSchema),\n/* harmony export */   ClientCapabilitiesSchema: () => (/* binding */ ClientCapabilitiesSchema),\n/* harmony export */   ClientNotificationSchema: () => (/* binding */ ClientNotificationSchema),\n/* harmony export */   ClientRequestSchema: () => (/* binding */ ClientRequestSchema),\n/* harmony export */   ClientResultSchema: () => (/* binding */ ClientResultSchema),\n/* harmony export */   CompatibilityCallToolResultSchema: () => (/* binding */ CompatibilityCallToolResultSchema),\n/* harmony export */   CompleteRequestSchema: () => (/* binding */ CompleteRequestSchema),\n/* harmony export */   CompleteResultSchema: () => (/* binding */ CompleteResultSchema),\n/* harmony export */   CreateMessageRequestSchema: () => (/* binding */ CreateMessageRequestSchema),\n/* harmony export */   CreateMessageResultSchema: () => (/* binding */ CreateMessageResultSchema),\n/* harmony export */   CursorSchema: () => (/* binding */ CursorSchema),\n/* harmony export */   EmbeddedResourceSchema: () => (/* binding */ EmbeddedResourceSchema),\n/* harmony export */   EmptyResultSchema: () => (/* binding */ EmptyResultSchema),\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   GetPromptRequestSchema: () => (/* binding */ GetPromptRequestSchema),\n/* harmony export */   GetPromptResultSchema: () => (/* binding */ GetPromptResultSchema),\n/* harmony export */   ImageContentSchema: () => (/* binding */ ImageContentSchema),\n/* harmony export */   ImplementationSchema: () => (/* binding */ ImplementationSchema),\n/* harmony export */   InitializeRequestSchema: () => (/* binding */ InitializeRequestSchema),\n/* harmony export */   InitializeResultSchema: () => (/* binding */ InitializeResultSchema),\n/* harmony export */   InitializedNotificationSchema: () => (/* binding */ InitializedNotificationSchema),\n/* harmony export */   JSONRPCErrorSchema: () => (/* binding */ JSONRPCErrorSchema),\n/* harmony export */   JSONRPCMessageSchema: () => (/* binding */ JSONRPCMessageSchema),\n/* harmony export */   JSONRPCNotificationSchema: () => (/* binding */ JSONRPCNotificationSchema),\n/* harmony export */   JSONRPCRequestSchema: () => (/* binding */ JSONRPCRequestSchema),\n/* harmony export */   JSONRPCResponseSchema: () => (/* binding */ JSONRPCResponseSchema),\n/* harmony export */   JSONRPC_VERSION: () => (/* binding */ JSONRPC_VERSION),\n/* harmony export */   LATEST_PROTOCOL_VERSION: () => (/* binding */ LATEST_PROTOCOL_VERSION),\n/* harmony export */   ListPromptsRequestSchema: () => (/* binding */ ListPromptsRequestSchema),\n/* harmony export */   ListPromptsResultSchema: () => (/* binding */ ListPromptsResultSchema),\n/* harmony export */   ListResourceTemplatesRequestSchema: () => (/* binding */ ListResourceTemplatesRequestSchema),\n/* harmony export */   ListResourceTemplatesResultSchema: () => (/* binding */ ListResourceTemplatesResultSchema),\n/* harmony export */   ListResourcesRequestSchema: () => (/* binding */ ListResourcesRequestSchema),\n/* harmony export */   ListResourcesResultSchema: () => (/* binding */ ListResourcesResultSchema),\n/* harmony export */   ListRootsRequestSchema: () => (/* binding */ ListRootsRequestSchema),\n/* harmony export */   ListRootsResultSchema: () => (/* binding */ ListRootsResultSchema),\n/* harmony export */   ListToolsRequestSchema: () => (/* binding */ ListToolsRequestSchema),\n/* harmony export */   ListToolsResultSchema: () => (/* binding */ ListToolsResultSchema),\n/* harmony export */   LoggingLevelSchema: () => (/* binding */ LoggingLevelSchema),\n/* harmony export */   LoggingMessageNotificationSchema: () => (/* binding */ LoggingMessageNotificationSchema),\n/* harmony export */   McpError: () => (/* binding */ McpError),\n/* harmony export */   ModelHintSchema: () => (/* binding */ ModelHintSchema),\n/* harmony export */   ModelPreferencesSchema: () => (/* binding */ ModelPreferencesSchema),\n/* harmony export */   NotificationSchema: () => (/* binding */ NotificationSchema),\n/* harmony export */   PaginatedRequestSchema: () => (/* binding */ PaginatedRequestSchema),\n/* harmony export */   PaginatedResultSchema: () => (/* binding */ PaginatedResultSchema),\n/* harmony export */   PingRequestSchema: () => (/* binding */ PingRequestSchema),\n/* harmony export */   ProgressNotificationSchema: () => (/* binding */ ProgressNotificationSchema),\n/* harmony export */   ProgressSchema: () => (/* binding */ ProgressSchema),\n/* harmony export */   ProgressTokenSchema: () => (/* binding */ ProgressTokenSchema),\n/* harmony export */   PromptArgumentSchema: () => (/* binding */ PromptArgumentSchema),\n/* harmony export */   PromptListChangedNotificationSchema: () => (/* binding */ PromptListChangedNotificationSchema),\n/* harmony export */   PromptMessageSchema: () => (/* binding */ PromptMessageSchema),\n/* harmony export */   PromptReferenceSchema: () => (/* binding */ PromptReferenceSchema),\n/* harmony export */   PromptSchema: () => (/* binding */ PromptSchema),\n/* harmony export */   ReadResourceRequestSchema: () => (/* binding */ ReadResourceRequestSchema),\n/* harmony export */   ReadResourceResultSchema: () => (/* binding */ ReadResourceResultSchema),\n/* harmony export */   RequestIdSchema: () => (/* binding */ RequestIdSchema),\n/* harmony export */   RequestSchema: () => (/* binding */ RequestSchema),\n/* harmony export */   ResourceContentsSchema: () => (/* binding */ ResourceContentsSchema),\n/* harmony export */   ResourceListChangedNotificationSchema: () => (/* binding */ ResourceListChangedNotificationSchema),\n/* harmony export */   ResourceReferenceSchema: () => (/* binding */ ResourceReferenceSchema),\n/* harmony export */   ResourceSchema: () => (/* binding */ ResourceSchema),\n/* harmony export */   ResourceTemplateSchema: () => (/* binding */ ResourceTemplateSchema),\n/* harmony export */   ResourceUpdatedNotificationSchema: () => (/* binding */ ResourceUpdatedNotificationSchema),\n/* harmony export */   ResultSchema: () => (/* binding */ ResultSchema),\n/* harmony export */   RootSchema: () => (/* binding */ RootSchema),\n/* harmony export */   RootsListChangedNotificationSchema: () => (/* binding */ RootsListChangedNotificationSchema),\n/* harmony export */   SUPPORTED_PROTOCOL_VERSIONS: () => (/* binding */ SUPPORTED_PROTOCOL_VERSIONS),\n/* harmony export */   SamplingMessageSchema: () => (/* binding */ SamplingMessageSchema),\n/* harmony export */   ServerCapabilitiesSchema: () => (/* binding */ ServerCapabilitiesSchema),\n/* harmony export */   ServerNotificationSchema: () => (/* binding */ ServerNotificationSchema),\n/* harmony export */   ServerRequestSchema: () => (/* binding */ ServerRequestSchema),\n/* harmony export */   ServerResultSchema: () => (/* binding */ ServerResultSchema),\n/* harmony export */   SetLevelRequestSchema: () => (/* binding */ SetLevelRequestSchema),\n/* harmony export */   SubscribeRequestSchema: () => (/* binding */ SubscribeRequestSchema),\n/* harmony export */   TextContentSchema: () => (/* binding */ TextContentSchema),\n/* harmony export */   TextResourceContentsSchema: () => (/* binding */ TextResourceContentsSchema),\n/* harmony export */   ToolAnnotationsSchema: () => (/* binding */ ToolAnnotationsSchema),\n/* harmony export */   ToolListChangedNotificationSchema: () => (/* binding */ ToolListChangedNotificationSchema),\n/* harmony export */   ToolSchema: () => (/* binding */ ToolSchema),\n/* harmony export */   UnsubscribeRequestSchema: () => (/* binding */ UnsubscribeRequestSchema),\n/* harmony export */   isInitializeRequest: () => (/* binding */ isInitializeRequest),\n/* harmony export */   isInitializedNotification: () => (/* binding */ isInitializedNotification),\n/* harmony export */   isJSONRPCError: () => (/* binding */ isJSONRPCError),\n/* harmony export */   isJSONRPCNotification: () => (/* binding */ isJSONRPCNotification),\n/* harmony export */   isJSONRPCRequest: () => (/* binding */ isJSONRPCRequest),\n/* harmony export */   isJSONRPCResponse: () => (/* binding */ isJSONRPCResponse)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n\nconst LATEST_PROTOCOL_VERSION = \"2025-03-26\";\nconst SUPPORTED_PROTOCOL_VERSIONS = [\n    LATEST_PROTOCOL_VERSION,\n    \"2024-11-05\",\n    \"2024-10-07\",\n];\n/* JSON-RPC types */\nconst JSONRPC_VERSION = \"2.0\";\n/**\n * A progress token, used to associate progress notifications with the original request.\n */\nconst ProgressTokenSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int()]);\n/**\n * An opaque token used to represent a cursor for pagination.\n */\nconst CursorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string();\nconst RequestMetaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.\n     */\n    progressToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(ProgressTokenSchema),\n})\n    .passthrough();\nconst BaseRequestParamsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(RequestMetaSchema),\n})\n    .passthrough();\nconst RequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    params: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(BaseRequestParamsSchema),\n});\nconst BaseNotificationParamsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n})\n    .passthrough();\nconst NotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    params: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(BaseNotificationParamsSchema),\n});\nconst ResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * A uniquely identifying ID for a request in JSON-RPC.\n */\nconst RequestIdSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int()]);\n/**\n * A request that expects a response.\n */\nconst JSONRPCRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n})\n    .merge(RequestSchema)\n    .strict();\nconst isJSONRPCRequest = (value) => JSONRPCRequestSchema.safeParse(value).success;\n/**\n * A notification which does not expect a response.\n */\nconst JSONRPCNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(JSONRPC_VERSION),\n})\n    .merge(NotificationSchema)\n    .strict();\nconst isJSONRPCNotification = (value) => JSONRPCNotificationSchema.safeParse(value).success;\n/**\n * A successful (non-error) response to a request.\n */\nconst JSONRPCResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n    result: ResultSchema,\n})\n    .strict();\nconst isJSONRPCResponse = (value) => JSONRPCResponseSchema.safeParse(value).success;\n/**\n * Error codes defined by the JSON-RPC specification.\n */\nvar ErrorCode;\n(function (ErrorCode) {\n    // SDK error codes\n    ErrorCode[ErrorCode[\"ConnectionClosed\"] = -32000] = \"ConnectionClosed\";\n    ErrorCode[ErrorCode[\"RequestTimeout\"] = -32001] = \"RequestTimeout\";\n    // Standard JSON-RPC error codes\n    ErrorCode[ErrorCode[\"ParseError\"] = -32700] = \"ParseError\";\n    ErrorCode[ErrorCode[\"InvalidRequest\"] = -32600] = \"InvalidRequest\";\n    ErrorCode[ErrorCode[\"MethodNotFound\"] = -32601] = \"MethodNotFound\";\n    ErrorCode[ErrorCode[\"InvalidParams\"] = -32602] = \"InvalidParams\";\n    ErrorCode[ErrorCode[\"InternalError\"] = -32603] = \"InternalError\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * A response to a request that indicates an error occurred.\n */\nconst JSONRPCErrorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        /**\n         * The error type that occurred.\n         */\n        code: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int(),\n        /**\n         * A short description of the error. The message SHOULD be limited to a concise single sentence.\n         */\n        message: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        /**\n         * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).\n         */\n        data: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.unknown()),\n    }),\n})\n    .strict();\nconst isJSONRPCError = (value) => JSONRPCErrorSchema.safeParse(value).success;\nconst JSONRPCMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    JSONRPCRequestSchema,\n    JSONRPCNotificationSchema,\n    JSONRPCResponseSchema,\n    JSONRPCErrorSchema,\n]);\n/* Empty result */\n/**\n * A response that indicates success but carries no data.\n */\nconst EmptyResultSchema = ResultSchema.strict();\n/* Cancellation */\n/**\n * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n *\n * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n *\n * This notification indicates that the result will be unused, so any associated processing SHOULD cease.\n *\n * A client MUST NOT attempt to cancel its `initialize` request.\n */\nconst CancelledNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/cancelled\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The ID of the request to cancel.\n         *\n         * This MUST correspond to the ID of a request previously issued in the same direction.\n         */\n        requestId: RequestIdSchema,\n        /**\n         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.\n         */\n        reason: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    }),\n});\n/* Initialization */\n/**\n * Describes the name and version of an MCP implementation.\n */\nconst ImplementationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n})\n    .passthrough();\n/**\n * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.\n */\nconst ClientCapabilitiesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * Experimental, non-standard capabilities that the client supports.\n     */\n    experimental: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n    /**\n     * Present if the client supports sampling from an LLM.\n     */\n    sampling: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n    /**\n     * Present if the client supports listing roots.\n     */\n    roots: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        /**\n         * Whether the client supports issuing notifications for changes to the roots list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    })\n        .passthrough()),\n})\n    .passthrough();\n/**\n * This request is sent from the client to the server when it first connects, asking it to begin initialization.\n */\nconst InitializeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"initialize\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.\n         */\n        protocolVersion: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        capabilities: ClientCapabilitiesSchema,\n        clientInfo: ImplementationSchema,\n    }),\n});\nconst isInitializeRequest = (value) => InitializeRequestSchema.safeParse(value).success;\n/**\n * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.\n */\nconst ServerCapabilitiesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * Experimental, non-standard capabilities that the server supports.\n     */\n    experimental: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n    /**\n     * Present if the server supports sending log messages to the client.\n     */\n    logging: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n    /**\n     * Present if the server supports sending completions to the client.\n     */\n    completions: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n    /**\n     * Present if the server offers any prompt templates.\n     */\n    prompts: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        /**\n         * Whether this server supports issuing notifications for changes to the prompt list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    })\n        .passthrough()),\n    /**\n     * Present if the server offers any resources to read.\n     */\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        /**\n         * Whether this server supports clients subscribing to resource updates.\n         */\n        subscribe: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n        /**\n         * Whether this server supports issuing notifications for changes to the resource list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    })\n        .passthrough()),\n    /**\n     * Present if the server offers any tools to call.\n     */\n    tools: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        /**\n         * Whether this server supports issuing notifications for changes to the tool list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    })\n        .passthrough()),\n})\n    .passthrough();\n/**\n * After receiving an initialize request from the client, the server sends this response.\n */\nconst InitializeResultSchema = ResultSchema.extend({\n    /**\n     * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.\n     */\n    protocolVersion: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    capabilities: ServerCapabilitiesSchema,\n    serverInfo: ImplementationSchema,\n    /**\n     * Instructions describing how to use the server and its features.\n     *\n     * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.\n     */\n    instructions: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n});\n/**\n * This notification is sent from the client to the server after initialization has finished.\n */\nconst InitializedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/initialized\"),\n});\nconst isInitializedNotification = (value) => InitializedNotificationSchema.safeParse(value).success;\n/* Ping */\n/**\n * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.\n */\nconst PingRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"ping\"),\n});\n/* Progress notifications */\nconst ProgressSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * The progress thus far. This should increase every time progress is made, even if the total is unknown.\n     */\n    progress: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    /**\n     * Total number of items to process (or total progress required), if known.\n     */\n    total: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()),\n    /**\n     * An optional message describing the current progress.\n     */\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n})\n    .passthrough();\n/**\n * An out-of-band notification used to inform the receiver of a progress update for a long-running request.\n */\nconst ProgressNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/progress\"),\n    params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({\n        /**\n         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.\n         */\n        progressToken: ProgressTokenSchema,\n    }),\n});\n/* Pagination */\nconst PaginatedRequestSchema = RequestSchema.extend({\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * An opaque token representing the current pagination position.\n         * If provided, the server should return results starting after this cursor.\n         */\n        cursor: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(CursorSchema),\n    }).optional(),\n});\nconst PaginatedResultSchema = ResultSchema.extend({\n    /**\n     * An opaque token representing the pagination position after the last returned result.\n     * If present, there may be more results available.\n     */\n    nextCursor: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(CursorSchema),\n});\n/* Resources */\n/**\n * The contents of a specific resource or sub-resource.\n */\nconst ResourceContentsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * The URI of this resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n})\n    .passthrough();\nconst TextResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * The text of the item. This must only be set if the item can actually be represented as text (not binary data).\n     */\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n});\nconst BlobResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * A base64-encoded string representing the binary data of the item.\n     */\n    blob: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().base64(),\n});\n/**\n * A known resource that the server is capable of reading.\n */\nconst ResourceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * The URI of this resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * A human-readable name for this resource.\n     *\n     * This can be used by clients to populate UI elements.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * A description of what this resource represents.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n})\n    .passthrough();\n/**\n * A template description for resources available on the server.\n */\nconst ResourceTemplateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * A URI template (according to RFC 6570) that can be used to construct resource URIs.\n     */\n    uriTemplate: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * A human-readable name for the type of resource this template refers to.\n     *\n     * This can be used by clients to populate UI elements.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * A description of what this template is for.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    /**\n     * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n})\n    .passthrough();\n/**\n * Sent from the client to request a list of resources the server has.\n */\nconst ListResourcesRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"resources/list\"),\n});\n/**\n * The server's response to a resources/list request from the client.\n */\nconst ListResourcesResultSchema = PaginatedResultSchema.extend({\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(ResourceSchema),\n});\n/**\n * Sent from the client to request a list of resource templates the server has.\n */\nconst ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"resources/templates/list\"),\n});\n/**\n * The server's response to a resources/templates/list request from the client.\n */\nconst ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({\n    resourceTemplates: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(ResourceTemplateSchema),\n});\n/**\n * Sent from the client to the server, to read a specific resource URI.\n */\nconst ReadResourceRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"resources/read\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    }),\n});\n/**\n * The server's response to a resources/read request from the client.\n */\nconst ReadResourceResultSchema = ResultSchema.extend({\n    contents: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.union([TextResourceContentsSchema, BlobResourceContentsSchema])),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst ResourceListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/resources/list_changed\"),\n});\n/**\n * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.\n */\nconst SubscribeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"resources/subscribe\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    }),\n});\n/**\n * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.\n */\nconst UnsubscribeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"resources/unsubscribe\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to unsubscribe from.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    }),\n});\n/**\n * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.\n */\nconst ResourceUpdatedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/resources/updated\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    }),\n});\n/* Prompts */\n/**\n * Describes an argument that a prompt can accept.\n */\nconst PromptArgumentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * The name of the argument.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * A human-readable description of the argument.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    /**\n     * Whether this argument must be provided.\n     */\n    required: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n})\n    .passthrough();\n/**\n * A prompt or prompt template that the server offers.\n */\nconst PromptSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * The name of the prompt or prompt template.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * An optional description of what this prompt provides\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    /**\n     * A list of arguments to use for templating the prompt.\n     */\n    arguments: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.array(PromptArgumentSchema)),\n})\n    .passthrough();\n/**\n * Sent from the client to request a list of prompts and prompt templates the server has.\n */\nconst ListPromptsRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"prompts/list\"),\n});\n/**\n * The server's response to a prompts/list request from the client.\n */\nconst ListPromptsResultSchema = PaginatedResultSchema.extend({\n    prompts: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(PromptSchema),\n});\n/**\n * Used by the client to get a prompt provided by the server.\n */\nconst GetPromptRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"prompts/get\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The name of the prompt or prompt template.\n         */\n        name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        /**\n         * Arguments to use for templating the prompt.\n         */\n        arguments: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())),\n    }),\n});\n/**\n * Text provided to or from an LLM.\n */\nconst TextContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"text\"),\n    /**\n     * The text content of the message.\n     */\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n})\n    .passthrough();\n/**\n * An image provided to or from an LLM.\n */\nconst ImageContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"image\"),\n    /**\n     * The base64-encoded image data.\n     */\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().base64(),\n    /**\n     * The MIME type of the image. Different providers may support different image types.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n})\n    .passthrough();\n/**\n * An Audio provided to or from an LLM.\n */\nconst AudioContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"audio\"),\n    /**\n     * The base64-encoded audio data.\n     */\n    data: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().base64(),\n    /**\n     * The MIME type of the audio. Different providers may support different audio types.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n})\n    .passthrough();\n/**\n * The contents of a resource, embedded into a prompt or tool call result.\n */\nconst EmbeddedResourceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"resource\"),\n    resource: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n})\n    .passthrough();\n/**\n * Describes a message returned as part of a prompt.\n */\nconst PromptMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"user\", \"assistant\"]),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n        TextContentSchema,\n        ImageContentSchema,\n        AudioContentSchema,\n        EmbeddedResourceSchema,\n    ]),\n})\n    .passthrough();\n/**\n * The server's response to a prompts/get request from the client.\n */\nconst GetPromptResultSchema = ResultSchema.extend({\n    /**\n     * An optional description for the prompt.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    messages: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(PromptMessageSchema),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst PromptListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/prompts/list_changed\"),\n});\n/* Tools */\n/**\n * Additional properties describing a Tool to clients.\n *\n * NOTE: all properties in ToolAnnotations are **hints**.\n * They are not guaranteed to provide a faithful description of\n * tool behavior (including descriptive properties like `title`).\n *\n * Clients should never make tool use decisions based on ToolAnnotations\n * received from untrusted servers.\n */\nconst ToolAnnotationsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * A human-readable title for the tool.\n     */\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    /**\n     * If true, the tool does not modify its environment.\n     *\n     * Default: false\n     */\n    readOnlyHint: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    /**\n     * If true, the tool may perform destructive updates to its environment.\n     * If false, the tool performs only additive updates.\n     *\n     * (This property is meaningful only when `readOnlyHint == false`)\n     *\n     * Default: true\n     */\n    destructiveHint: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    /**\n     * If true, calling the tool repeatedly with the same arguments\n     * will have no additional effect on the its environment.\n     *\n     * (This property is meaningful only when `readOnlyHint == false`)\n     *\n     * Default: false\n     */\n    idempotentHint: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    /**\n     * If true, this tool may interact with an \"open world\" of external\n     * entities. If false, the tool's domain of interaction is closed.\n     * For example, the world of a web search tool is open, whereas that\n     * of a memory tool is not.\n     *\n     * Default: true\n     */\n    openWorldHint: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n})\n    .passthrough();\n/**\n * Definition for a tool the client can call.\n */\nconst ToolSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * The name of the tool.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * A human-readable description of the tool.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    /**\n     * A JSON Schema object defining the expected parameters for the tool.\n     */\n    inputSchema: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"object\"),\n        properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n        required: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())),\n    })\n        .passthrough(),\n    /**\n     * An optional JSON Schema object defining the structure of the tool's output returned in\n     * the structuredContent field of a CallToolResult.\n     */\n    outputSchema: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"object\"),\n        properties: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n        required: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())),\n    })\n        .passthrough()),\n    /**\n     * Optional additional tool information.\n     */\n    annotations: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(ToolAnnotationsSchema),\n})\n    .passthrough();\n/**\n * Sent from the client to request a list of tools the server has.\n */\nconst ListToolsRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"tools/list\"),\n});\n/**\n * The server's response to a tools/list request from the client.\n */\nconst ListToolsResultSchema = PaginatedResultSchema.extend({\n    tools: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(ToolSchema),\n});\n/**\n * The server's response to a tool call.\n */\nconst CallToolResultSchema = ResultSchema.extend({\n    /**\n     * A list of content objects that represent the result of the tool call.\n     *\n     * If the Tool does not define an outputSchema, this field MUST be present in the result.\n     * For backwards compatibility, this field is always present, but it may be empty.\n     */\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n        TextContentSchema,\n        ImageContentSchema,\n        AudioContentSchema,\n        EmbeddedResourceSchema,\n    ])).default([]),\n    /**\n     * An object containing structured tool output.\n     *\n     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.\n     */\n    structuredContent: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough().optional(),\n    /**\n     * Whether the tool call ended in an error.\n     *\n     * If not set, this is assumed to be false (the call was successful).\n     *\n     * Any errors that originate from the tool SHOULD be reported inside the result\n     * object, with `isError` set to true, _not_ as an MCP protocol-level error\n     * response. Otherwise, the LLM would not be able to see that an error occurred\n     * and self-correct.\n     *\n     * However, any errors in _finding_ the tool, an error indicating that the\n     * server does not support tool calls, or any other exceptional conditions,\n     * should be reported as an MCP error response.\n     */\n    isError: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n});\n/**\n * CallToolResultSchema extended with backwards compatibility to protocol version 2024-10-07.\n */\nconst CompatibilityCallToolResultSchema = CallToolResultSchema.or(ResultSchema.extend({\n    toolResult: zod__WEBPACK_IMPORTED_MODULE_0__.z.unknown(),\n}));\n/**\n * Used by the client to invoke a tool provided by the server.\n */\nconst CallToolRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"tools/call\"),\n    params: BaseRequestParamsSchema.extend({\n        name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        arguments: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.unknown())),\n    }),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst ToolListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/tools/list_changed\"),\n});\n/* Logging */\n/**\n * The severity of a log message.\n */\nconst LoggingLevelSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\n    \"debug\",\n    \"info\",\n    \"notice\",\n    \"warning\",\n    \"error\",\n    \"critical\",\n    \"alert\",\n    \"emergency\",\n]);\n/**\n * A request from the client to the server, to enable or adjust logging.\n */\nconst SetLevelRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"logging/setLevel\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.\n         */\n        level: LoggingLevelSchema,\n    }),\n});\n/**\n * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.\n */\nconst LoggingMessageNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/message\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The severity of this log message.\n         */\n        level: LoggingLevelSchema,\n        /**\n         * An optional name of the logger issuing this message.\n         */\n        logger: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n        /**\n         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.\n         */\n        data: zod__WEBPACK_IMPORTED_MODULE_0__.z.unknown(),\n    }),\n});\n/* Sampling */\n/**\n * Hints to use for model selection.\n */\nconst ModelHintSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * A hint for a model name.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n})\n    .passthrough();\n/**\n * The server's preferences for model selection, requested of the client during sampling.\n */\nconst ModelPreferencesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * Optional hints to use for model selection.\n     */\n    hints: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.array(ModelHintSchema)),\n    /**\n     * How much to prioritize cost when selecting a model.\n     */\n    costPriority: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(1)),\n    /**\n     * How much to prioritize sampling speed (latency) when selecting a model.\n     */\n    speedPriority: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(1)),\n    /**\n     * How much to prioritize intelligence and capabilities when selecting a model.\n     */\n    intelligencePriority: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(1)),\n})\n    .passthrough();\n/**\n * Describes a message issued to or received from an LLM API.\n */\nconst SamplingMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"user\", \"assistant\"]),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([TextContentSchema, ImageContentSchema, AudioContentSchema]),\n})\n    .passthrough();\n/**\n * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.\n */\nconst CreateMessageRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"sampling/createMessage\"),\n    params: BaseRequestParamsSchema.extend({\n        messages: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(SamplingMessageSchema),\n        /**\n         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.\n         */\n        systemPrompt: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n        /**\n         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.\n         */\n        includeContext: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"none\", \"thisServer\", \"allServers\"])),\n        temperature: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()),\n        /**\n         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.\n         */\n        maxTokens: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int(),\n        stopSequences: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())),\n        /**\n         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.\n         */\n        metadata: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}).passthrough()),\n        /**\n         * The server's preferences for which model to select.\n         */\n        modelPreferences: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(ModelPreferencesSchema),\n    }),\n});\n/**\n * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.\n */\nconst CreateMessageResultSchema = ResultSchema.extend({\n    /**\n     * The name of the model that generated the message.\n     */\n    model: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    /**\n     * The reason why sampling stopped.\n     */\n    stopReason: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"endTurn\", \"stopSequence\", \"maxTokens\"]).or(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())),\n    role: zod__WEBPACK_IMPORTED_MODULE_0__.z[\"enum\"]([\"user\", \"assistant\"]),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion(\"type\", [\n        TextContentSchema,\n        ImageContentSchema,\n        AudioContentSchema\n    ]),\n});\n/* Autocomplete */\n/**\n * A reference to a resource or resource template definition.\n */\nconst ResourceReferenceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"ref/resource\"),\n    /**\n     * The URI or URI template of the resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n})\n    .passthrough();\n/**\n * Identifies a prompt.\n */\nconst PromptReferenceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"ref/prompt\"),\n    /**\n     * The name of the prompt or prompt template\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n})\n    .passthrough();\n/**\n * A request from the client to the server, to ask for completion options.\n */\nconst CompleteRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"completion/complete\"),\n    params: BaseRequestParamsSchema.extend({\n        ref: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([PromptReferenceSchema, ResourceReferenceSchema]),\n        /**\n         * The argument's information\n         */\n        argument: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            /**\n             * The name of the argument\n             */\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            /**\n             * The value of the argument to use for completion matching.\n             */\n            value: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        })\n            .passthrough(),\n    }),\n});\n/**\n * The server's response to a completion/complete request\n */\nconst CompleteResultSchema = ResultSchema.extend({\n    completion: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        /**\n         * An array of completion values. Must not exceed 100 items.\n         */\n        values: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).max(100),\n        /**\n         * The total number of completion options available. This can exceed the number of values actually sent in the response.\n         */\n        total: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int()),\n        /**\n         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.\n         */\n        hasMore: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    })\n        .passthrough(),\n});\n/* Roots */\n/**\n * Represents a root directory or file that the server can operate on.\n */\nconst RootSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    /**\n     * The URI identifying the root. This *must* start with file:// for now.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().startsWith(\"file://\"),\n    /**\n     * An optional name for the root.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n})\n    .passthrough();\n/**\n * Sent from the server to request a list of root URIs from the client.\n */\nconst ListRootsRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"roots/list\"),\n});\n/**\n * The client's response to a roots/list request from the server.\n */\nconst ListRootsResultSchema = ResultSchema.extend({\n    roots: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(RootSchema),\n});\n/**\n * A notification from the client to the server, informing it that the list of roots has changed.\n */\nconst RootsListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"notifications/roots/list_changed\"),\n});\n/* Client messages */\nconst ClientRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    PingRequestSchema,\n    InitializeRequestSchema,\n    CompleteRequestSchema,\n    SetLevelRequestSchema,\n    GetPromptRequestSchema,\n    ListPromptsRequestSchema,\n    ListResourcesRequestSchema,\n    ListResourceTemplatesRequestSchema,\n    ReadResourceRequestSchema,\n    SubscribeRequestSchema,\n    UnsubscribeRequestSchema,\n    CallToolRequestSchema,\n    ListToolsRequestSchema,\n]);\nconst ClientNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    InitializedNotificationSchema,\n    RootsListChangedNotificationSchema,\n]);\nconst ClientResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    EmptyResultSchema,\n    CreateMessageResultSchema,\n    ListRootsResultSchema,\n]);\n/* Server messages */\nconst ServerRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    PingRequestSchema,\n    CreateMessageRequestSchema,\n    ListRootsRequestSchema,\n]);\nconst ServerNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    LoggingMessageNotificationSchema,\n    ResourceUpdatedNotificationSchema,\n    ResourceListChangedNotificationSchema,\n    ToolListChangedNotificationSchema,\n    PromptListChangedNotificationSchema,\n]);\nconst ServerResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    EmptyResultSchema,\n    InitializeResultSchema,\n    CompleteResultSchema,\n    GetPromptResultSchema,\n    ListPromptsResultSchema,\n    ListResourcesResultSchema,\n    ListResourceTemplatesResultSchema,\n    ReadResourceResultSchema,\n    CallToolResultSchema,\n    ListToolsResultSchema,\n]);\nclass McpError extends Error {\n    constructor(code, message, data) {\n        super(`MCP error ${code}: ${message}`);\n        this.code = code;\n        this.data = data;\n        this.name = \"McpError\";\n    }\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\n");

/***/ })

};
;