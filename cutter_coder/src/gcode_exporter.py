from typing import List, Optional, TextIO
from datetime import datetime
import logging

from .config import CuttingConfig
from .toolpath_generator import Toolpath, ToolpathMove

logger = logging.getLogger(__name__)

class GCodeExporter:
    """Export toolpaths to G-code format"""
    
    def __init__(self, config: CuttingConfig, dialect: str = "linuxcnc"):
        self.config = config
        self.dialect = dialect
        self.line_number = 10
        self.line_increment = 10
        
    def export(self, toolpaths: List[Toolpath], output_file: str) -> str:
        """Export toolpaths to G-code file"""
        with open(output_file, 'w') as f:
            self._write_header(f)
            self._write_setup(f)
            
            for i, toolpath in enumerate(toolpaths):
                self._write_toolpath(f, toolpath, i)
            
            self._write_footer(f)
        
        logger.info(f"G-code exported to {output_file}")
        return output_file
    
    def export_to_string(self, toolpaths: List[Toolpath]) -> str:
        """Export toolpaths to G-code string"""
        lines = []
        
        # Header
        lines.extend(self._get_header_lines())
        lines.extend(self._get_setup_lines())
        
        # Toolpaths
        for i, toolpath in enumerate(toolpaths):
            lines.extend(self._get_toolpath_lines(toolpath, i))
        
        # Footer
        lines.extend(self._get_footer_lines())
        
        return '\n'.join(lines)
    
    def _write_header(self, f: TextIO):
        """Write G-code header"""
        lines = self._get_header_lines()
        for line in lines:
            f.write(line + '\n')
    
    def _get_header_lines(self) -> List[str]:
        """Generate header lines"""
        lines = []
        lines.append(f"% Generated by DXF to G-Code Converter")
        lines.append(f"% Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        lines.append(f"% Material: {self.config.material.type}")
        lines.append(f"% Thickness: {self.config.material.thickness}mm")
        lines.append(f"% Tool Diameter: {self.config.tool.diameter}mm")
        lines.append(f"%")
        return lines
    
    def _write_setup(self, f: TextIO):
        """Write machine setup G-code"""
        lines = self._get_setup_lines()
        for line in lines:
            f.write(line + '\n')
    
    def _get_setup_lines(self) -> List[str]:
        """Generate setup lines"""
        lines = []
        
        # Program start
        lines.append(self._format_line("G90", "Absolute positioning"))
        lines.append(self._format_line("G21", "Metric units"))
        lines.append(self._format_line("G17", "XY plane selection"))
        lines.append(self._format_line("G40", "Cancel cutter compensation"))
        lines.append(self._format_line("G49", "Cancel tool length offset"))
        lines.append(self._format_line("G80", "Cancel canned cycle"))
        lines.append(self._format_line("G94", "Feed rate per minute"))
        
        # Spindle setup
        lines.append(self._format_line(
            f"S{self.config.material.spindle_speed} M3", 
            "Start spindle clockwise"
        ))
        
        # Pause for spindle spin-up
        lines.append(self._format_line("G4 P2", "Dwell 2 seconds"))
        
        # Move to safe height
        lines.append(self._format_line(
            f"G0 Z{self.config.safety_height}", 
            "Move to safety height"
        ))
        
        return lines
    
    def _write_toolpath(self, f: TextIO, toolpath: Toolpath, index: int):
        """Write a single toolpath"""
        lines = self._get_toolpath_lines(toolpath, index)
        for line in lines:
            f.write(line + '\n')
    
    def _get_toolpath_lines(self, toolpath: Toolpath, index: int) -> List[str]:
        """Generate toolpath lines with arc support"""
        lines = []
        
        # Toolpath comment
        lines.append(f"")
        lines.append(f"% Toolpath {index + 1}: {toolpath.type}")
        
        last_feed = None
        
        for move in toolpath.moves:
            if move.type == 'rapid':
                # Rapid move
                if move.end[2] != move.start[2]:
                    # Z movement
                    lines.append(self._format_line(f"G0 Z{move.end[2]:.3f}"))
                lines.append(self._format_line(
                    f"G0 X{move.end[0]:.3f} Y{move.end[1]:.3f}",
                    "Rapid position"
                ))
                
            elif move.type == 'line':
                # Linear move
                # Check if it's a plunge
                if move.end[0] == move.start[0] and move.end[1] == move.start[1]:
                    # Pure Z move (plunge)
                    if last_feed != toolpath.plunge_rate:
                        lines.append(self._format_line(
                            f"F{toolpath.plunge_rate:.0f}",
                            "Set plunge rate"
                        ))
                        last_feed = toolpath.plunge_rate
                    lines.append(self._format_line(f"G1 Z{move.end[2]:.3f}"))
                else:
                    # XY move
                    if last_feed != toolpath.feed_rate:
                        lines.append(self._format_line(
                            f"F{toolpath.feed_rate:.0f}",
                            "Set feed rate"
                        ))
                        last_feed = toolpath.feed_rate
                    
                    if move.end[2] != move.start[2]:
                        lines.append(self._format_line(
                            f"G1 X{move.end[0]:.3f} Y{move.end[1]:.3f} Z{move.end[2]:.3f}"
                        ))
                    else:
                        lines.append(self._format_line(
                            f"G1 X{move.end[0]:.3f} Y{move.end[1]:.3f}"
                        ))
                        
            elif move.type == 'arc':
                # Arc move
                if last_feed != toolpath.feed_rate:
                    lines.append(self._format_line(
                        f"F{toolpath.feed_rate:.0f}",
                        "Set feed rate"
                    ))
                    last_feed = toolpath.feed_rate
                
                # Calculate I and J (center relative to start)
                i = move.center[0] - move.start[0]
                j = move.center[1] - move.start[1]
                
                # Use G2 for clockwise, G3 for counter-clockwise
                g_code = "G2" if move.clockwise else "G3"
                
                lines.append(self._format_line(
                    f"{g_code} X{move.end[0]:.3f} Y{move.end[1]:.3f} I{i:.3f} J{j:.3f}",
                    "Arc"
                ))
        
        return lines
    
    def _write_footer(self, f: TextIO):
        """Write G-code footer"""
        lines = self._get_footer_lines()
        for line in lines:
            f.write(line + '\n')
    
    def _get_footer_lines(self) -> List[str]:
        """Generate footer lines"""
        lines = []
        
        lines.append("")
        lines.append("% Program end")
        
        # Return to home
        lines.append(self._format_line(
            f"G0 Z{self.config.safety_height + 10}",
            "Final retract"
        ))
        lines.append(self._format_line("M5", "Stop spindle"))
        lines.append(self._format_line("G0 X0 Y0", "Return to origin"))
        lines.append(self._format_line("M30", "Program end"))
        lines.append("%")
        
        return lines
    
    def _format_line(self, code: str, comment: Optional[str] = None) -> str:
        """Format a G-code line with optional line number and comment"""
        if self.dialect == "linuxcnc":
            # LinuxCNC doesn't require line numbers
            if comment:
                return f"{code} ({comment})"
            else:
                return code
        else:
            # Other dialects might use line numbers
            line = f"N{self.line_number} {code}"
            self.line_number += self.line_increment
            
            if comment:
                line += f" ({comment})"
            
            return line

